{"ast":null,"code":"import \"antd/lib/icon/style\";\nimport _Icon from \"antd/lib/icon\";\nimport _objectSpread from \"/Users/evan/progressMan/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _defineProperty from \"/Users/evan/progressMan/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/evan/progressMan/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/evan/progressMan/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/evan/progressMan/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/evan/progressMan/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/evan/progressMan/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/evan/progressMan/src/components/TransferTree/TransferTree.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport List from './List';\nimport ListTree from './ListTree';\nimport classNames from 'classnames';\nimport './style/index.less';\n\nfunction noop() {}\n\nvar TransferTree =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(TransferTree, _React$Component);\n\n  function TransferTree(props) {\n    var _this;\n\n    _classCallCheck(this, TransferTree);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TransferTree).call(this, props));\n\n    _this.handleFilter = function (direction, v) {\n      _this.setState(_defineProperty({}, \"\".concat(direction, \"Filter\"), v));\n    };\n\n    _this.handleLeftFilter = function (v) {\n      return _this.handleFilter('left', v);\n    };\n\n    _this.handleRightFilter = function (v) {\n      return _this.handleFilter('right', v);\n    };\n\n    _this.handleClear = function (direction) {\n      _this.setState(_defineProperty({}, \"\".concat(direction, \"Filter\"), ''));\n    };\n\n    _this.handleRightClear = function () {\n      return _this.handleClear('right');\n    };\n\n    _this.handleDeleteItem = function (nodes) {\n      var treeKey = _this.props.treeKey;\n\n      var targetNodes = _this.state.targetNodes.filter(function (node) {\n        return !nodes.some(function (item) {\n          return item[treeKey] === node[treeKey];\n        });\n      });\n\n      var targetKeys = targetNodes.map(function (node) {\n        return node[treeKey];\n      });\n\n      _this.setState({\n        selectedKeys: targetKeys,\n        targetNodes: targetNodes\n      });\n\n      _this.props.onChange && _this.props.onChange(targetKeys, targetNodes);\n    };\n\n    _this.onTreeSelected = function (selectedNodes) {\n      var _this$props = _this.props,\n          treeKey = _this$props.treeKey,\n          treeTitleKey = _this$props.treeTitleKey;\n      var targetNodes = selectedNodes.map(function (node) {\n        var _objectSpread2;\n\n        return _objectSpread((_objectSpread2 = {}, _defineProperty(_objectSpread2, treeKey, node[treeKey]), _defineProperty(_objectSpread2, treeTitleKey, node[treeTitleKey]), _objectSpread2), node.props);\n      });\n      var targetKeys = targetNodes.map(function (node) {\n        return node[treeKey];\n      });\n\n      _this.setState({\n        selectedKeys: targetKeys,\n        targetNodes: targetNodes\n      });\n\n      _this.props.onChange && _this.props.onChange(targetKeys, targetNodes);\n    };\n\n    _this.state = {\n      leftFilter: '',\n      rightFilter: '',\n      dataSource: props.dataSource,\n      targetNodes: props.targetNodes,\n      selectedKeys: props.targetNodes ? props.targetNodes.map(function (node) {\n        return node[props.treeKey];\n      }) : null\n    };\n\n    if (props.showSearch) {\n      _this.flatTreeData = _this.getFlatTreeData(props.dataSource);\n    }\n\n    return _this;\n  }\n\n  _createClass(TransferTree, [{\n    key: \"getFlatTreeData\",\n    value: function getFlatTreeData(treeData) {\n      var _this2 = this;\n\n      var data = [];\n      treeData.forEach(function (item) {\n        if (item.children) {\n          data = data.concat(_this2.getFlatTreeData(item.children));\n        } else {\n          data.push(item);\n        }\n      });\n      return data;\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var targetNodes = nextProps.targetNodes,\n          dataSource = nextProps.dataSource;\n\n      if (nextProps.targetNodes !== this.props.targetNodes || nextProps.dataSource !== this.props.dataSource) {\n        if (targetNodes) {\n          this.setState({\n            targetNodes: targetNodes,\n            selectedKeys: targetNodes.map(function (node) {\n              return node[nextProps.treeKey];\n            })\n          });\n        }\n\n        if (dataSource) {\n          this.setState({\n            dataSource: dataSource\n          });\n        }\n\n        if (nextProps.showSearch) {\n          this.flatTreeData = this.getFlatTreeData(dataSource);\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _classNames;\n\n      var _this$props2 = this.props,\n          prefixCls = _this$props2.prefixCls,\n          titleText = _this$props2.titleText,\n          showSearch = _this$props2.showSearch,\n          notFoundContent = _this$props2.notFoundContent,\n          treeKey = _this$props2.treeKey,\n          treeTitleKey = _this$props2.treeTitleKey,\n          searchPlaceholder = _this$props2.searchPlaceholder,\n          footer = _this$props2.footer,\n          listStyle = _this$props2.listStyle,\n          className = _this$props2.className,\n          listRender = _this$props2.listRender,\n          treeRender = _this$props2.treeRender,\n          loadData = _this$props2.loadData,\n          loading = _this$props2.loading,\n          asyncSearch = _this$props2.asyncSearch;\n      var _this$state = this.state,\n          leftFilter = _this$state.leftFilter,\n          rightFilter = _this$state.rightFilter,\n          selectedKeys = _this$state.selectedKeys,\n          targetNodes = _this$state.targetNodes,\n          dataSource = _this$state.dataSource;\n      var cls = classNames((_classNames = {}, _defineProperty(_classNames, className, !!className), _defineProperty(_classNames, prefixCls, true), _classNames));\n      return React.createElement(\"div\", {\n        className: cls,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, React.createElement(ListTree, {\n        titleText: titleText,\n        loadData: loadData,\n        asyncSearch: asyncSearch,\n        treeData: dataSource,\n        flatTreeData: this.flatTreeData,\n        selectedKeys: selectedKeys,\n        selectedNodes: targetNodes,\n        treeKey: treeKey,\n        treeTitleKey: treeTitleKey,\n        treeRender: treeRender,\n        style: listStyle,\n        filter: leftFilter,\n        handleFilter: this.handleLeftFilter,\n        onTreeSelected: this.onTreeSelected,\n        showSearch: showSearch,\n        searchPlaceholder: searchPlaceholder,\n        notFoundContent: notFoundContent,\n        footer: footer,\n        prefixCls: \"\".concat(prefixCls, \"-list\"),\n        loading: loading,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"\".concat(prefixCls, \"-operation\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }, React.createElement(_Icon, {\n        type: \"right\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      })), React.createElement(List, {\n        filter: rightFilter,\n        dataSource: targetNodes,\n        style: listStyle,\n        onDeleteItem: this.handleDeleteItem,\n        render: listRender,\n        notFoundContent: notFoundContent,\n        prefixCls: \"\".concat(prefixCls, \"-list\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return TransferTree;\n}(React.Component);\n\nTransferTree.defaultProps = {\n  prefixCls: 'antui-transfer-tree',\n  dataSource: [],\n  onChange: noop,\n  titleText: '源列表',\n  treeKey: 'key',\n  treeTitleKey: 'title',\n  showSearch: false,\n  footer: noop,\n  loading: false\n};\nTransferTree.propTypes = {\n  prefixCls: PropTypes.string,\n  dataSource: PropTypes.array,\n  targetNodes: PropTypes.array,\n  onChange: PropTypes.func,\n  listStyle: PropTypes.object,\n  listRender: PropTypes.func,\n  treeKey: PropTypes.string,\n  treeTitleKey: PropTypes.string,\n  className: PropTypes.string,\n  titleText: PropTypes.string,\n  showSearch: PropTypes.bool,\n  searchPlaceholder: PropTypes.string,\n  notFoundContent: PropTypes.node,\n  footer: PropTypes.func,\n  treeRender: PropTypes.func,\n  loadData: PropTypes.func,\n  loading: PropTypes.bool,\n  asyncSearch: PropTypes.func\n};\nexport { TransferTree as default };","map":{"version":3,"sources":["/Users/evan/progressMan/src/components/TransferTree/TransferTree.js"],"names":["React","PropTypes","List","ListTree","classNames","noop","TransferTree","props","handleFilter","direction","v","setState","handleLeftFilter","handleRightFilter","handleClear","handleRightClear","handleDeleteItem","nodes","treeKey","targetNodes","state","filter","node","some","item","targetKeys","map","selectedKeys","onChange","onTreeSelected","selectedNodes","treeTitleKey","leftFilter","rightFilter","dataSource","showSearch","flatTreeData","getFlatTreeData","treeData","data","forEach","children","concat","push","nextProps","prefixCls","titleText","notFoundContent","searchPlaceholder","footer","listStyle","className","listRender","treeRender","loadData","loading","asyncSearch","cls","Component","defaultProps","propTypes","string","array","func","object","bool"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport List from './List';\nimport ListTree from './ListTree';\nimport { Icon } from 'antd';\nimport classNames from 'classnames';\nimport './style/index.less';\n\nfunction noop() {}\n\nexport default class TransferTree extends React.Component {\n  static defaultProps = {\n    prefixCls: 'antui-transfer-tree',\n    dataSource: [],\n    onChange: noop,\n    titleText: '源列表',\n    treeKey: 'key',\n    treeTitleKey: 'title',\n    showSearch: false,\n    footer: noop,\n    loading: false\n  };\n\n  static propTypes = {\n    prefixCls: PropTypes.string,\n    dataSource: PropTypes.array,\n    targetNodes: PropTypes.array,\n    onChange: PropTypes.func,\n    listStyle: PropTypes.object,\n    listRender: PropTypes.func,\n    treeKey: PropTypes.string,\n    treeTitleKey: PropTypes.string,\n    className: PropTypes.string,\n    titleText: PropTypes.string,\n    showSearch: PropTypes.bool,\n    searchPlaceholder: PropTypes.string,\n    notFoundContent: PropTypes.node,\n    footer: PropTypes.func,\n    treeRender: PropTypes.func,\n    loadData: PropTypes.func,\n    loading: PropTypes.bool,\n    asyncSearch: PropTypes.func,\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      leftFilter: '',\n      rightFilter: '',\n      dataSource: props.dataSource,\n      targetNodes: props.targetNodes,\n      selectedKeys: props.targetNodes\n        ? props.targetNodes.map(node => node[props.treeKey])\n        : null\n    };\n    if (props.showSearch) {\n      this.flatTreeData = this.getFlatTreeData(props.dataSource);\n    }\n  }\n\n  getFlatTreeData(treeData) {\n    let data = [];\n    treeData.forEach(item => {\n      if (item.children) {\n        data = data.concat(this.getFlatTreeData(item.children));\n      } else {\n        data.push(item);\n      }\n    });\n    return data;\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const { targetNodes, dataSource } = nextProps;\n    if (\n      nextProps.targetNodes !== this.props.targetNodes ||\n      nextProps.dataSource !== this.props.dataSource\n    ) {\n      if (targetNodes) {\n        this.setState({\n          targetNodes: targetNodes,\n          selectedKeys: targetNodes.map(node => node[nextProps.treeKey])\n        })\n      }\n      if (dataSource) {\n        this.setState({\n          dataSource: dataSource\n        });\n      }\n      if (nextProps.showSearch) {\n        this.flatTreeData = this.getFlatTreeData(dataSource);\n      }\n    }\n  }\n\n  handleFilter = (direction, v) => {\n    this.setState({\n      [`${direction}Filter`]: v\n    });\n  };\n\n  handleLeftFilter = v => this.handleFilter('left', v);\n  handleRightFilter = v => this.handleFilter('right', v);\n\n  handleClear = direction => {\n    this.setState({\n      [`${direction}Filter`]: ''\n    });\n  };\n\n  handleRightClear = () => this.handleClear('right');\n  handleDeleteItem = nodes => {\n    const { treeKey } = this.props;\n    const targetNodes = this.state.targetNodes.filter(\n      node => !nodes.some(item => item[treeKey] === node[treeKey])\n    );\n    const targetKeys = targetNodes.map(node => node[treeKey]);\n\n    this.setState({\n      selectedKeys: targetKeys,\n      targetNodes: targetNodes\n    });\n\n    this.props.onChange && this.props.onChange(targetKeys, targetNodes);\n  };\n\n  onTreeSelected = selectedNodes => {\n    const { treeKey, treeTitleKey } = this.props;\n    let targetNodes = selectedNodes.map(node => ({\n      [treeKey]: node[treeKey],\n      [treeTitleKey]: node[treeTitleKey],\n      ...node.props\n    }));\n\n    const targetKeys = targetNodes.map(node => node[treeKey]);\n\n    this.setState({\n      selectedKeys: targetKeys,\n      targetNodes: targetNodes\n    });\n\n    this.props.onChange && this.props.onChange(targetKeys, targetNodes);\n  };\n\n  render() {\n    const {\n      prefixCls,\n      titleText,\n      showSearch,\n      notFoundContent,\n      treeKey,\n      treeTitleKey,\n      searchPlaceholder,\n      footer,\n      listStyle,\n      className,\n      listRender,\n      treeRender,\n      loadData,\n      loading,\n      asyncSearch\n    } = this.props;\n    const { leftFilter, rightFilter, selectedKeys, targetNodes, dataSource } = this.state;\n\n    const cls = classNames({\n      [className]: !!className,\n      [prefixCls]: true\n    });\n\n    return (\n      <div className={cls}>\n        <ListTree\n          titleText={titleText}\n          loadData={loadData}\n          asyncSearch={asyncSearch}\n          treeData={dataSource}\n          flatTreeData={this.flatTreeData}\n          selectedKeys={selectedKeys}\n          selectedNodes={targetNodes}\n          treeKey={treeKey}\n          treeTitleKey={treeTitleKey}\n          treeRender={treeRender}\n          style={listStyle}\n          filter={leftFilter}\n          handleFilter={this.handleLeftFilter}\n          onTreeSelected={this.onTreeSelected}\n          showSearch={showSearch}\n          searchPlaceholder={searchPlaceholder}\n          notFoundContent={notFoundContent}\n          footer={footer}\n          prefixCls={`${prefixCls}-list`}\n          loading={loading}\n        />\n        <div className={`${prefixCls}-operation`}>\n          <Icon type=\"right\" />\n        </div>\n        <List\n          filter={rightFilter}\n          dataSource={targetNodes}\n          style={listStyle}\n          onDeleteItem={this.handleDeleteItem}\n          render={listRender}\n          notFoundContent={notFoundContent}\n          prefixCls={`${prefixCls}-list`}\n        />\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}