{"ast":null,"code":"import _objectSpread from \"/Users/evan/progressMan/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\n// http://www.wheresrhys.co.uk/fetch-mock/api\n// http://mockjs.com/\nimport fetchMock from 'fetch-mock';\nimport $$ from 'cmn-utils';\nimport Mock from 'mockjs';\nimport config from '@/config';\nvar mock = Mock.mock;\n/**\n * 模拟延时请求\n * @param {any} response 模拟响应数据\n * @param {number} time 延时多少毫秒，省略这个省数将会生成100ms内的一个延时\n */\n\nvar delay = function delay(response, time) {\n  return function () {\n    return $$.delay(time || Math.random() * 100).then(function () {\n      return response;\n    });\n  };\n}; // 模拟数据时包装反回数据\n\n\nvar toSuccess = function toSuccess(response, time) {\n  if (time) {\n    return delay(config.mock.toSuccess(response), time);\n  } else {\n    return config.mock.toSuccess(response);\n  }\n};\n\nvar toError = function toError(message, time) {\n  if (time) {\n    return delay(config.mock.toError(message), time);\n  } else {\n    return config.mock.toError(message);\n  }\n};\n\nexport default (function () {\n  /**\n   * 配置如果没拦截到直接走原生的fetch方法\n   */\n  fetchMock.config = _objectSpread({}, fetchMock.config, {\n    fallbackToNetwork: true,\n    warnOnFallback: false\n  });\n\n  for (var _len = arguments.length, mocks = new Array(_len), _key = 0; _key < _len; _key++) {\n    mocks[_key] = arguments[_key];\n  }\n\n  mocks.forEach(function (mockFile) {\n    var mockAPIs = {};\n\n    if ($$.isFunction(mockFile)) {\n      mockAPIs = mockFile({\n        fetchMock: fetchMock,\n        delay: delay,\n        mock: mock,\n        toSuccess: toSuccess,\n        toError: toError\n      });\n    } else if ($$.isObject(mockFile)) {\n      mockAPIs = mockFile;\n    } else {\n      throw new Error('mock file require both Function or Object');\n    }\n\n    var _loop = function _loop(key) {\n      var method_url = key.split(' '); // 'GET /api/getUserInfo'\n\n      var method = 'mock';\n      var url = null;\n\n      if (method_url.length === 2) {\n        method = method_url[0].toLowerCase();\n        url = method_url[1];\n      } else {\n        url = method_url[0];\n      } // 处理正则情况 即url开头带regexp:的\n\n\n      if (url.indexOf('regexp:') === 0) {\n        url = new RegExp(url.substring(7));\n      }\n      /**\n       * 如果想要针对请求时的参数，反回不同的数据，比如翻页\n       * 时解析body体里的页数，或查询条件，反回对应的数据，\n       * 这时可以把mock写成函数形式，这时会接收发送fetch时的\n       * options做为参数 fetch(url, options)\n       */\n\n\n      if ($$.isFunction(mockAPIs[key])) {\n        fetchMock[method](url, function (url, options) {\n          return mockAPIs[key](_objectSpread({\n            url: url\n          }, options));\n        });\n      } else {\n        fetchMock[method](url, mockAPIs[key]);\n      }\n    };\n\n    for (var key in mockAPIs) {\n      _loop(key);\n    }\n  });\n});\nexport { mock };","map":{"version":3,"sources":["/Users/evan/progressMan/src/utils/packMock.js"],"names":["fetchMock","$$","Mock","config","mock","delay","response","time","Math","random","then","toSuccess","toError","message","fallbackToNetwork","warnOnFallback","mocks","forEach","mockFile","mockAPIs","isFunction","isObject","Error","key","method_url","split","method","url","length","toLowerCase","indexOf","RegExp","substring","options"],"mappings":"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","sourcesContent":["// http://www.wheresrhys.co.uk/fetch-mock/api\n// http://mockjs.com/\nimport fetchMock from 'fetch-mock';\nimport $$ from 'cmn-utils';\nimport Mock from 'mockjs';\nimport config from '@/config';\nconst mock = Mock.mock;\n\n/**\n * 模拟延时请求\n * @param {any} response 模拟响应数据\n * @param {number} time 延时多少毫秒，省略这个省数将会生成100ms内的一个延时\n */\nconst delay = (response, time) => {\n  return () => $$.delay(time || Math.random() * 100).then(() => response);\n};\n\n// 模拟数据时包装反回数据\nconst toSuccess = (response, time) => {\n  if (time) {\n    return delay(config.mock.toSuccess(response), time);\n  } else {\n    return config.mock.toSuccess(response);\n  }\n};\nconst toError = (message, time) => {\n  if (time) {\n    return delay(config.mock.toError(message), time);\n  } else {\n    return config.mock.toError(message);\n  }\n};\n\nexport default (...mocks) => {\n  /**\n   * 配置如果没拦截到直接走原生的fetch方法\n   */\n\n  fetchMock.config = {\n    ...fetchMock.config,\n    fallbackToNetwork: true,\n    warnOnFallback: false\n  };\n\n  mocks.forEach(mockFile => {\n    let mockAPIs = {};\n    if ($$.isFunction(mockFile)) {\n      mockAPIs = mockFile({ fetchMock, delay, mock, toSuccess, toError });\n    } else if ($$.isObject(mockFile)) {\n      mockAPIs = mockFile;\n    } else {\n      throw new Error('mock file require both Function or Object');\n    }\n\n    for (const key in mockAPIs) {\n      const method_url = key.split(' ');\n\n      // 'GET /api/getUserInfo'\n      let method = 'mock';\n      let url = null;\n      if (method_url.length === 2) {\n        method = method_url[0].toLowerCase();\n        url = method_url[1];\n      } else {\n        url = method_url[0];\n      }\n\n      // 处理正则情况 即url开头带regexp:的\n      if (url.indexOf('regexp:') === 0) {\n        url = new RegExp(url.substring(7));\n      }\n\n      /**\n       * 如果想要针对请求时的参数，反回不同的数据，比如翻页\n       * 时解析body体里的页数，或查询条件，反回对应的数据，\n       * 这时可以把mock写成函数形式，这时会接收发送fetch时的\n       * options做为参数 fetch(url, options)\n       */\n      if ($$.isFunction(mockAPIs[key])) {\n        fetchMock[method](url, (url, options) =>\n          mockAPIs[key]({ url, ...options })\n        );\n      } else {\n        fetchMock[method](url, mockAPIs[key]);\n      }\n    }\n  });\n};\n\nexport { mock };\n"]},"metadata":{},"sourceType":"module"}