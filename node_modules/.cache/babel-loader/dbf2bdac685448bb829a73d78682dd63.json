{"ast":null,"code":"import _objectSpread from \"/Users/evan/progressMan/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"/Users/evan/progressMan/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"/Users/evan/progressMan/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/evan/progressMan/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/evan/progressMan/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/evan/progressMan/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/evan/progressMan/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/evan/progressMan/src/decorator/resizeMe.js\";\nimport React, { PureComponent } from 'react';\nimport ResizeSensor from 'css-element-queries/src/ResizeSensor';\nimport $$ from 'cmn-utils';\nvar debounce = $$.debounce,\n    throttle = $$.throttle;\n/**\n * 在一个类上增加这个装饰器，可以监听组件的大小变化，\n * 被包装的类在porps中将注入组件的width和height，并且\n * 在上级函组件中可以使用onResize函数\n * @param {*} config\n */\n\nvar defaultConfig = {\n  refreshRate: 16,\n  // 调用频率\n  refreshMode: 'throttle' // 使用函数，只能是节流或防抖函数[throttle | debounce]\n\n};\n\nvar resizeMe = function resizeMe() {\n  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultConfig;\n  var refreshFunc = config.refreshMode === 'throttle' ? throttle : debounce;\n  return function (WrappedComponent) {\n    var _temp;\n\n    return _temp =\n    /*#__PURE__*/\n    function (_PureComponent) {\n      _inherits(_temp, _PureComponent);\n\n      function _temp(props) {\n        var _this;\n\n        _classCallCheck(this, _temp);\n\n        _this = _possibleConstructorReturn(this, _getPrototypeOf(_temp).call(this, props));\n\n        _this.onResize = function () {\n          if (!_this.element) return;\n          var element = _this.element.parentNode;\n          var onResize = _this.props.onResize;\n\n          var _getComputedStyle = getComputedStyle(element),\n              width = _getComputedStyle.width,\n              height = _getComputedStyle.height,\n              paddingLeft = _getComputedStyle.paddingLeft,\n              paddingRight = _getComputedStyle.paddingRight,\n              paddingTop = _getComputedStyle.paddingTop,\n              paddingBottom = _getComputedStyle.paddingBottom;\n\n          var size = {\n            width: parseInt(width, 10) - parseInt(paddingLeft, 10) - parseInt(paddingRight, 10),\n            height: parseInt(height, 10) - parseInt(paddingTop, 10) - parseInt(paddingBottom, 10)\n          };\n\n          _this.setState(size);\n\n          onResize && onResize(size);\n        };\n\n        _this.onResizeStrategy = refreshFunc(_this.onResize, config.refreshRate);\n        _this.state = {\n          width: undefined,\n          height: undefined,\n          position: undefined\n        };\n        return _this;\n      }\n\n      _createClass(_temp, [{\n        key: \"componentDidMount\",\n        value: function componentDidMount() {\n          var element = this.element.parentNode;\n          this.resizeSensor = new ResizeSensor(element, this.onResizeStrategy);\n          this.onResizeStrategy();\n        }\n      }, {\n        key: \"componentWillUnmount\",\n        value: function componentWillUnmount() {\n          var element = this.element.parentNode;\n          this.resizeSensor.detach(element, this.onResizeStrategy);\n        }\n      }, {\n        key: \"render\",\n        value: function render() {\n          var _this2 = this;\n\n          var _this$state = this.state,\n              width = _this$state.width,\n              height = _this$state.height;\n\n          var _this$props = this.props,\n              className = _this$props.className,\n              otherProps = _objectWithoutProperties(_this$props, [\"className\"]);\n\n          var styles = {\n            position: 'relative',\n            width: '100%',\n            height: '100%'\n          };\n          return React.createElement(\"div\", {\n            ref: function ref(node) {\n              return _this2.element = node;\n            },\n            style: styles,\n            className: className,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 81\n            },\n            __self: this\n          }, width && height ? React.createElement(WrappedComponent, Object.assign({}, otherProps, {\n            size: _objectSpread({}, this.state),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 87\n            },\n            __self: this\n          })) : null);\n        }\n      }]);\n\n      return _temp;\n    }(PureComponent), _temp;\n  };\n};\n\nexport default resizeMe;","map":{"version":3,"sources":["/Users/evan/progressMan/src/decorator/resizeMe.js"],"names":["React","PureComponent","ResizeSensor","$$","debounce","throttle","defaultConfig","refreshRate","refreshMode","resizeMe","config","refreshFunc","WrappedComponent","props","onResize","element","parentNode","getComputedStyle","width","height","paddingLeft","paddingRight","paddingTop","paddingBottom","size","parseInt","setState","onResizeStrategy","state","undefined","position","resizeSensor","detach","className","otherProps","styles","node"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,OAAOC,YAAP,MAAyB,sCAAzB;AACA,OAAOC,EAAP,MAAe,WAAf;IACQC,Q,GAAuBD,E,CAAvBC,Q;IAAUC,Q,GAAaF,E,CAAbE,Q;AAElB;;;;;;;AAMA,IAAMC,aAAa,GAAG;AACpBC,EAAAA,WAAW,EAAE,EADO;AACH;AACjBC,EAAAA,WAAW,EAAE,UAFO,CAEI;;AAFJ,CAAtB;;AAKA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,GAA4B;AAAA,MAA3BC,MAA2B,uEAAlBJ,aAAkB;AAC3C,MAAMK,WAAW,GAAGD,MAAM,CAACF,WAAP,KAAuB,UAAvB,GAAoCH,QAApC,GAA+CD,QAAnE;AAEA,SAAO,UAAAQ,gBAAgB,EAAI;AAAA;;AACzB;AAAA;AAAA;AAAA;;AACE,qBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,mFAAMA,KAAN;;AADiB,cAqBnBC,QArBmB,GAqBR,YAAM;AACf,cAAI,CAAC,MAAKC,OAAV,EAAmB;AAEnB,cAAMA,OAAO,GAAG,MAAKA,OAAL,CAAaC,UAA7B;AAHe,cAIPF,QAJO,GAIM,MAAKD,KAJX,CAIPC,QAJO;;AAAA,kCAYXG,gBAAgB,CAACF,OAAD,CAZL;AAAA,cAMbG,KANa,qBAMbA,KANa;AAAA,cAObC,MAPa,qBAObA,MAPa;AAAA,cAQbC,WARa,qBAQbA,WARa;AAAA,cASbC,YATa,qBASbA,YATa;AAAA,cAUbC,UAVa,qBAUbA,UAVa;AAAA,cAWbC,aAXa,qBAWbA,aAXa;;AAcf,cAAMC,IAAI,GAAG;AACXN,YAAAA,KAAK,EACHO,QAAQ,CAACP,KAAD,EAAQ,EAAR,CAAR,GACAO,QAAQ,CAACL,WAAD,EAAc,EAAd,CADR,GAEAK,QAAQ,CAACJ,YAAD,EAAe,EAAf,CAJC;AAKXF,YAAAA,MAAM,EACJM,QAAQ,CAACN,MAAD,EAAS,EAAT,CAAR,GACAM,QAAQ,CAACH,UAAD,EAAa,EAAb,CADR,GAEAG,QAAQ,CAACF,aAAD,EAAgB,EAAhB;AARC,WAAb;;AAUA,gBAAKG,QAAL,CAAcF,IAAd;;AAEAV,UAAAA,QAAQ,IAAIA,QAAQ,CAACU,IAAD,CAApB;AACD,SAhDkB;;AAEjB,cAAKG,gBAAL,GAAwBhB,WAAW,CAAC,MAAKG,QAAN,EAAgBJ,MAAM,CAACH,WAAvB,CAAnC;AACA,cAAKqB,KAAL,GAAa;AACXV,UAAAA,KAAK,EAAEW,SADI;AAEXV,UAAAA,MAAM,EAAEU,SAFG;AAGXC,UAAAA,QAAQ,EAAED;AAHC,SAAb;AAHiB;AAQlB;;AATH;AAAA;AAAA,4CAWsB;AAClB,cAAMd,OAAO,GAAG,KAAKA,OAAL,CAAaC,UAA7B;AACA,eAAKe,YAAL,GAAoB,IAAI7B,YAAJ,CAAiBa,OAAjB,EAA0B,KAAKY,gBAA/B,CAApB;AACA,eAAKA,gBAAL;AACD;AAfH;AAAA;AAAA,+CAiByB;AACrB,cAAMZ,OAAO,GAAG,KAAKA,OAAL,CAAaC,UAA7B;AACA,eAAKe,YAAL,CAAkBC,MAAlB,CAAyBjB,OAAzB,EAAkC,KAAKY,gBAAvC;AACD;AApBH;AAAA;AAAA,iCAmDW;AAAA;;AAAA,4BACmB,KAAKC,KADxB;AAAA,cACCV,KADD,eACCA,KADD;AAAA,cACQC,MADR,eACQA,MADR;;AAAA,4BAE8B,KAAKN,KAFnC;AAAA,cAECoB,SAFD,eAECA,SAFD;AAAA,cAEeC,UAFf;;AAGP,cAAMC,MAAM,GAAG;AACbL,YAAAA,QAAQ,EAAE,UADG;AAEbZ,YAAAA,KAAK,EAAE,MAFM;AAGbC,YAAAA,MAAM,EAAE;AAHK,WAAf;AAKA,iBACE;AACE,YAAA,GAAG,EAAE,aAAAiB,IAAI;AAAA,qBAAK,MAAI,CAACrB,OAAL,GAAeqB,IAApB;AAAA,aADX;AAEE,YAAA,KAAK,EAAED,MAFT;AAGE,YAAA,SAAS,EAAEF,SAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAKGf,KAAK,IAAIC,MAAT,GACC,oBAAC,gBAAD,oBAAsBe,UAAtB;AAAkC,YAAA,IAAI,oBAAO,KAAKN,KAAZ,CAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADD,GAEG,IAPN,CADF;AAWD;AAtEH;;AAAA;AAAA,MAAqB3B,aAArB;AAwED,GAzED;AA0ED,CA7ED;;AA+EA,eAAeQ,QAAf","sourcesContent":["import React, { PureComponent } from 'react';\nimport ResizeSensor from 'css-element-queries/src/ResizeSensor';\nimport $$ from 'cmn-utils';\nconst { debounce, throttle } = $$;\n\n/**\n * 在一个类上增加这个装饰器，可以监听组件的大小变化，\n * 被包装的类在porps中将注入组件的width和height，并且\n * 在上级函组件中可以使用onResize函数\n * @param {*} config\n */\nconst defaultConfig = {\n  refreshRate: 16, // 调用频率\n  refreshMode: 'throttle' // 使用函数，只能是节流或防抖函数[throttle | debounce]\n};\n\nconst resizeMe = (config = defaultConfig) => {\n  const refreshFunc = config.refreshMode === 'throttle' ? throttle : debounce;\n\n  return WrappedComponent => {\n    return class extends PureComponent {\n      constructor(props) {\n        super(props);\n        this.onResizeStrategy = refreshFunc(this.onResize, config.refreshRate);\n        this.state = {\n          width: undefined,\n          height: undefined,\n          position: undefined\n        };\n      }\n\n      componentDidMount() {\n        const element = this.element.parentNode;\n        this.resizeSensor = new ResizeSensor(element, this.onResizeStrategy);\n        this.onResizeStrategy();\n      }\n\n      componentWillUnmount() {\n        const element = this.element.parentNode;\n        this.resizeSensor.detach(element, this.onResizeStrategy);\n      }\n\n      onResize = () => {\n        if (!this.element) return;\n\n        const element = this.element.parentNode;\n        const { onResize } = this.props;\n        const {\n          width,\n          height,\n          paddingLeft,\n          paddingRight,\n          paddingTop,\n          paddingBottom\n        } = getComputedStyle(element);\n\n        const size = {\n          width:\n            parseInt(width, 10) -\n            parseInt(paddingLeft, 10) -\n            parseInt(paddingRight, 10),\n          height:\n            parseInt(height, 10) -\n            parseInt(paddingTop, 10) -\n            parseInt(paddingBottom, 10)\n        };\n        this.setState(size);\n\n        onResize && onResize(size);\n      };\n\n      render() {\n        const { width, height } = this.state;\n        const { className, ...otherProps } = this.props;\n        const styles = {\n          position: 'relative',\n          width: '100%',\n          height: '100%'\n        };\n        return (\n          <div\n            ref={node => (this.element = node)}\n            style={styles}\n            className={className}\n          >\n            {width && height ? (\n              <WrappedComponent {...otherProps} size={{ ...this.state }} />\n            ) : null}\n          </div>\n        );\n      }\n    };\n  };\n};\n\nexport default resizeMe;\n"]},"metadata":{},"sourceType":"module"}