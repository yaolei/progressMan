{"ast":null,"code":"import \"antd/lib/spin/style\";\nimport _Spin from \"antd/lib/spin\";\nimport _toConsumableArray from \"/Users/evan/progressMan/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport \"antd/lib/tree/style\";\nimport _Tree from \"antd/lib/tree\";\nimport _objectSpread from \"/Users/evan/progressMan/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/evan/progressMan/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/evan/progressMan/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/evan/progressMan/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/evan/progressMan/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/evan/progressMan/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/evan/progressMan/src/components/TransferTree/ListTree.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Search from './Search';\n\nfunction noop() {}\n\nvar ListTree =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ListTree, _React$Component);\n\n  function ListTree() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ListTree);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ListTree)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      expandedKeys: [],\n      autoExpandParent: true,\n      searchList: []\n    };\n\n    _this.handleFilter = function (value) {\n      _this.renderFilterResult(value);\n\n      _this.props.handleFilter(value);\n    };\n\n    _this.handleClear = function () {\n      _this.renderFilterResult('');\n\n      _this.props.handleFilter('');\n    };\n\n    _this.renderTreeNodes = function (data) {\n      var _this$props = _this.props,\n          treeKey = _this$props.treeKey,\n          treeTitleKey = _this$props.treeTitleKey;\n      return data.map(function (item) {\n        var treeProps = _objectSpread({}, item, {\n          key: item[treeKey],\n          title: item[treeTitleKey],\n          dataRef: item\n        });\n\n        if (item.children) {\n          return React.createElement(_Tree.TreeNode, Object.assign({}, treeProps, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 69\n            },\n            __self: this\n          }), _this.renderTreeNodes(item.children));\n        }\n\n        return React.createElement(_Tree.TreeNode, Object.assign({}, treeProps, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74\n          },\n          __self: this\n        }));\n      });\n    };\n\n    _this.renderFilterResult = function (filter) {\n      var _this$props2 = _this.props,\n          flatTreeData = _this$props2.flatTreeData,\n          treeTitleKey = _this$props2.treeTitleKey,\n          asyncSearch = _this$props2.asyncSearch;\n\n      if (asyncSearch) {\n        var promise = asyncSearch(filter);\n\n        if (promise.then) {\n          promise.then(function (listItem) {\n            _this.setState({\n              searchList: listItem\n            });\n          });\n        }\n      } else {\n        _this.setState({\n          searchList: flatTreeData.filter(function (item) {\n            return item[treeTitleKey].indexOf(filter) >= 0;\n          })\n        });\n      }\n    };\n\n    _this.renderSearchItem = function (searchList) {\n      return searchList.map(function (item, index) {\n        return React.createElement(\"li\", {\n          className: \"list-comp-item\",\n          title: item[_this.props.treeTitleKey],\n          key: item[_this.props.treeKey],\n          onClick: function onClick() {\n            return _this.handleSelect(item);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          className: \"list-comp-item-body\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106\n          },\n          __self: this\n        }, item[_this.props.treeTitleKey]));\n      });\n    };\n\n    _this.handleSelect = function (selectedItem) {\n      var _this$props3 = _this.props,\n          selectedKeys = _this$props3.selectedKeys,\n          selectedNodes = _this$props3.selectedNodes,\n          treeKey = _this$props3.treeKey;\n\n      var _selectedNodes = selectedNodes ? _toConsumableArray(selectedNodes) : [];\n\n      if (selectedKeys && selectedKeys.some(function (key) {\n        return key === selectedItem[treeKey];\n      })) {\n        _selectedNodes = _selectedNodes.filter(function (item) {\n          return item[treeKey] !== selectedItem[treeKey];\n        });\n      } else {\n        _selectedNodes.push(selectedItem);\n      }\n\n      _this.props.onTreeSelected(_selectedNodes);\n    };\n\n    _this.onSelect = function (_selectedKeys, info) {\n      var _this$props4 = _this.props,\n          selectedNodes = _this$props4.selectedNodes,\n          selectedKeys = _this$props4.selectedKeys,\n          loadData = _this$props4.loadData,\n          onTreeSelected = _this$props4.onTreeSelected,\n          treeKey = _this$props4.treeKey;\n\n      if (info.selected && info.node.props.dataRef) {\n        if (loadData && !info.node.props.dataRef.isLeaf) {\n          return;\n        } else if (info.node.props.dataRef.children && info.node.props.dataRef.children.length) {\n          _this.onExpand([info.node.props.eventKey], info);\n\n          return;\n        }\n      } // 如果是异步数据需要与老数据进行拼合及去重\n\n\n      if (loadData) {\n        var _selectedNodes = selectedNodes ? _toConsumableArray(selectedNodes) : [];\n\n        if (!info.selected) {\n          // 如果是取消选择树节点，则先过滤掉\n          _selectedNodes = _selectedNodes.filter(function (item) {\n            return item[treeKey] !== info.node.props.eventKey;\n          });\n        }\n\n        var newNodes = selectedKeys ? _selectedNodes.concat(info.selectedNodes.filter(function (item) {\n          return selectedKeys.indexOf(item[treeKey]) < 0;\n        })) : info.selectedNodes;\n        onTreeSelected(newNodes);\n      } else {\n        onTreeSelected(info.selectedNodes);\n      }\n    };\n\n    _this.onExpand = function (expandedKeys, info) {\n      if (info.event && info.node.props.children) {\n        var concatKeys = [expandedKeys, _this.state.expandedKeys].reduce(function (prev, next) {\n          return prev.filter(function (item) {\n            return next.indexOf(item) === -1;\n          }).concat(next);\n        });\n\n        if (_this.state.expandedKeys.some(function (item) {\n          return item === info.node.props.eventKey;\n        })) {\n          concatKeys = concatKeys.filter(function (item) {\n            return item !== info.node.props.eventKey;\n          });\n        }\n\n        _this.setState({\n          expandedKeys: concatKeys,\n          autoExpandParent: false\n        });\n      } else {\n        _this.setState({\n          expandedKeys: expandedKeys,\n          autoExpandParent: false\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(ListTree, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props5 = this.props,\n          prefixCls = _this$props5.prefixCls,\n          loading = _this$props5.loading,\n          treeData = _this$props5.treeData,\n          titleText = _this$props5.titleText,\n          loadData = _this$props5.loadData,\n          filter = _this$props5.filter,\n          showSearch = _this$props5.showSearch,\n          style = _this$props5.style,\n          selectedKeys = _this$props5.selectedKeys;\n      var _this$state = this.state,\n          expandedKeys = _this$state.expandedKeys,\n          autoExpandParent = _this$state.autoExpandParent,\n          searchList = _this$state.searchList;\n      var _this$props6 = this.props,\n          searchPlaceholder = _this$props6.searchPlaceholder,\n          notFoundContent = _this$props6.notFoundContent;\n      var showTree = React.createElement(_Tree, {\n        loadData: loadData,\n        onSelect: this.onSelect,\n        onExpand: this.onExpand,\n        selectedKeys: selectedKeys || [],\n        expandedKeys: expandedKeys,\n        autoExpandParent: autoExpandParent,\n        multiple: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      }, this.renderTreeNodes(treeData));\n      return React.createElement(\"div\", {\n        className: prefixCls,\n        style: style,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"\".concat(prefixCls, \"-header tree-title\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221\n        },\n        __self: this\n      }, titleText), React.createElement(\"div\", {\n        className: showSearch ? \"\".concat(prefixCls, \"-body \").concat(prefixCls, \"-body-with-search\") : \"\".concat(prefixCls, \"-body\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      }, showSearch ? React.createElement(\"div\", {\n        className: \"\".concat(prefixCls, \"-body-search-wrapper\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230\n        },\n        __self: this\n      }, React.createElement(Search, {\n        prefixCls: \"\".concat(prefixCls, \"-search\"),\n        onChange: this.handleFilter,\n        handleClear: this.handleClear,\n        placeholder: searchPlaceholder || '请输入搜索内容',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231\n        },\n        __self: this\n      })) : null, React.createElement(\"div\", {\n        className: \"\".concat(prefixCls, \"-body-content tree-content\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239\n        },\n        __self: this\n      }, filter ? React.createElement(\"ul\", {\n        className: \"tree-filter-result\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241\n        },\n        __self: this\n      }, this.renderSearchItem(searchList)) : null, treeData.length ? showTree : React.createElement(\"div\", {\n        className: \"\".concat(prefixCls, \"-body-content-not-found\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248\n        },\n        __self: this\n      }, loading ? React.createElement(_Spin, {\n        spinning: loading,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250\n        },\n        __self: this\n      }) : notFoundContent || '列表为空'))));\n    }\n  }]);\n\n  return ListTree;\n}(React.Component);\n\nListTree.defaultProps = {\n  dataSource: [],\n  titleText: '',\n  treeKey: 'key',\n  treeTitleKey: 'title',\n  showSearch: false,\n  handleClear: noop,\n  handleFilter: noop,\n  handleSelect: noop,\n  handleSelectAll: noop\n};\nListTree.propTypes = {\n  prefixCls: PropTypes.string,\n  treeData: PropTypes.array,\n  selectedKeys: PropTypes.array,\n  showSearch: PropTypes.bool,\n  searchPlaceholder: PropTypes.string,\n  titleText: PropTypes.string,\n  treeKey: PropTypes.string,\n  treeTitleKey: PropTypes.string,\n  style: PropTypes.object,\n  handleClear: PropTypes.func,\n  notFoundContent: PropTypes.string,\n  filter: PropTypes.string,\n  handleFilter: PropTypes.func,\n  treeRender: PropTypes.func,\n  loading: PropTypes.bool,\n  flatTreeData: PropTypes.array\n};\nexport { ListTree as default };","map":{"version":3,"sources":["/Users/evan/progressMan/src/components/TransferTree/ListTree.js"],"names":["React","PropTypes","Search","noop","ListTree","state","expandedKeys","autoExpandParent","searchList","handleFilter","value","renderFilterResult","props","handleClear","renderTreeNodes","data","treeKey","treeTitleKey","map","item","treeProps","key","title","dataRef","children","filter","flatTreeData","asyncSearch","promise","then","listItem","setState","indexOf","renderSearchItem","index","handleSelect","selectedItem","selectedKeys","selectedNodes","_selectedNodes","some","push","onTreeSelected","onSelect","_selectedKeys","info","loadData","selected","node","isLeaf","length","onExpand","eventKey","newNodes","concat","event","concatKeys","reduce","prev","next","prefixCls","loading","treeData","titleText","showSearch","style","searchPlaceholder","notFoundContent","showTree","Component","defaultProps","dataSource","handleSelectAll","propTypes","string","array","bool","object","func","treeRender"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Search from './Search';\nimport { Tree, Spin } from 'antd';\n\nfunction noop() {}\n\nexport default class ListTree extends React.Component {\n  static defaultProps = {\n    dataSource: [],\n    titleText: '',\n    treeKey: 'key',\n    treeTitleKey: 'title',\n    showSearch: false,\n    handleClear: noop,\n    handleFilter: noop,\n    handleSelect: noop,\n    handleSelectAll: noop\n  };\n\n  static propTypes = {\n    prefixCls: PropTypes.string,\n    treeData: PropTypes.array,\n    selectedKeys: PropTypes.array,\n    showSearch: PropTypes.bool,\n    searchPlaceholder: PropTypes.string,\n    titleText: PropTypes.string,\n    treeKey: PropTypes.string,\n    treeTitleKey: PropTypes.string,\n    style: PropTypes.object,\n    handleClear: PropTypes.func,\n    notFoundContent: PropTypes.string,\n    filter: PropTypes.string,\n    handleFilter: PropTypes.func,\n    treeRender: PropTypes.func,\n    loading: PropTypes.bool,\n    flatTreeData: PropTypes.array\n  };\n\n  state = {\n    expandedKeys: [],\n    autoExpandParent: true,\n    searchList: [],\n  };\n\n  handleFilter = value => {\n    this.renderFilterResult(value);\n    this.props.handleFilter(value);\n  };\n\n  handleClear = () => {\n    this.renderFilterResult('');\n    this.props.handleFilter('');\n  };\n\n  renderTreeNodes = data => {\n    const { treeKey, treeTitleKey } = this.props;\n\n    return data.map(item => {\n      const treeProps = {\n        ...item,\n        key: item[treeKey],\n        title: item[treeTitleKey],\n        dataRef: item\n      };\n\n      if (item.children) {\n        return (\n          <Tree.TreeNode {...treeProps}>\n            {this.renderTreeNodes(item.children)}\n          </Tree.TreeNode>\n        );\n      }\n      return <Tree.TreeNode {...treeProps} />;\n    });\n  };\n\n  renderFilterResult = filter => {\n    const { flatTreeData, treeTitleKey, asyncSearch } = this.props;\n    if (asyncSearch) {\n      const promise = asyncSearch(filter);\n      if (promise.then) {\n        promise.then(listItem => {\n          this.setState({\n            searchList: listItem\n          });\n        });\n      }\n    } else {\n      this.setState({\n        searchList: flatTreeData.filter(\n          item => item[treeTitleKey].indexOf(filter) >= 0\n        )\n      });\n    }\n  };\n\n  renderSearchItem = searchList =>\n    searchList.map((item, index) => (\n      <li\n        className=\"list-comp-item\"\n        title={item[this.props.treeTitleKey]}\n        key={item[this.props.treeKey]}\n        onClick={() => this.handleSelect(item)}\n      >\n        <span className=\"list-comp-item-body\">\n          {item[this.props.treeTitleKey]}\n        </span>\n      </li>\n    ));\n\n  handleSelect = selectedItem => {\n    const { selectedKeys, selectedNodes, treeKey } = this.props;\n    let _selectedNodes = selectedNodes ? [...selectedNodes] : [];\n\n    if (\n      selectedKeys &&\n      selectedKeys.some(key => key === selectedItem[treeKey])\n    ) {\n      _selectedNodes = _selectedNodes.filter(\n        item => item[treeKey] !== selectedItem[treeKey]\n      );\n    } else {\n      _selectedNodes.push(selectedItem);\n    }\n    this.props.onTreeSelected(_selectedNodes);\n  };\n\n  onSelect = (_selectedKeys, info) => {\n    const {\n      selectedNodes,\n      selectedKeys,\n      loadData,\n      onTreeSelected,\n      treeKey\n    } = this.props;\n    if (info.selected && info.node.props.dataRef) {\n      if (loadData && !info.node.props.dataRef.isLeaf) {\n        return;\n      } else if (info.node.props.dataRef.children && info.node.props.dataRef.children.length) {\n        this.onExpand([info.node.props.eventKey], info);\n        return;\n      }\n    }\n    // 如果是异步数据需要与老数据进行拼合及去重\n    if (loadData) {\n      let _selectedNodes = selectedNodes ? [...selectedNodes] : [];\n      if (!info.selected) {\n        // 如果是取消选择树节点，则先过滤掉\n        _selectedNodes = _selectedNodes.filter(\n          item => item[treeKey] !== info.node.props.eventKey\n        );\n      }\n      const newNodes = selectedKeys\n        ? _selectedNodes.concat(\n            info.selectedNodes.filter(\n              item => selectedKeys.indexOf(item[treeKey]) < 0\n            )\n          )\n        : info.selectedNodes;\n      onTreeSelected(newNodes);\n    } else {\n      onTreeSelected(info.selectedNodes);\n    }\n  };\n\n  onExpand = (expandedKeys, info) => {\n    if (info.event && info.node.props.children) {\n      let concatKeys = [expandedKeys, this.state.expandedKeys].reduce(\n        (prev, next) =>\n          prev.filter(item => next.indexOf(item) === -1).concat(next)\n      );\n\n      if (\n        this.state.expandedKeys.some(item => item === info.node.props.eventKey)\n      ) {\n        concatKeys = concatKeys.filter(\n          item => item !== info.node.props.eventKey\n        );\n      }\n\n      this.setState({ expandedKeys: concatKeys, autoExpandParent: false });\n    } else {\n      this.setState({ expandedKeys, autoExpandParent: false });\n    }\n  };\n\n  render() {\n    const {\n      prefixCls,\n      loading,\n      treeData,\n      titleText,\n      loadData,\n      filter,\n      showSearch,\n      style,\n      selectedKeys\n    } = this.props;\n\n    const { expandedKeys, autoExpandParent, searchList } = this.state;\n\n    let { searchPlaceholder, notFoundContent } = this.props;\n\n    const showTree = (\n      <Tree\n        loadData={loadData}\n        onSelect={this.onSelect}\n        onExpand={this.onExpand}\n        selectedKeys={selectedKeys || []}\n        expandedKeys={expandedKeys}\n        autoExpandParent={autoExpandParent}\n        multiple\n      >\n        {this.renderTreeNodes(treeData)}\n      </Tree>\n    );\n\n    return (\n      <div className={prefixCls} style={style}>\n        <div className={`${prefixCls}-header tree-title`}>{titleText}</div>\n        <div\n          className={\n            showSearch\n              ? `${prefixCls}-body ${prefixCls}-body-with-search`\n              : `${prefixCls}-body`\n          }\n        >\n          {showSearch ? (\n            <div className={`${prefixCls}-body-search-wrapper`}>\n              <Search\n                prefixCls={`${prefixCls}-search`}\n                onChange={this.handleFilter}\n                handleClear={this.handleClear}\n                placeholder={searchPlaceholder || '请输入搜索内容'}\n              />\n            </div>\n          ) : null}\n          <div className={`${prefixCls}-body-content tree-content`}>\n            {filter ? (\n              <ul className=\"tree-filter-result\">\n                {this.renderSearchItem(searchList)}\n              </ul>\n            ) : null}\n            {treeData.length ? (\n              showTree\n            ) : (\n              <div className={`${prefixCls}-body-content-not-found`}>\n                {loading ? (\n                  <Spin spinning={loading} />\n                ) : (\n                  notFoundContent || '列表为空'\n                )}\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}