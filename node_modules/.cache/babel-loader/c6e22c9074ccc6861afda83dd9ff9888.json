{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.trigger = exports.off = exports.once = exports.on = exports.eventEmitter = undefined;\n\nvar _wolfy87Eventemitter = require('wolfy87-eventemitter');\n\nvar _wolfy87Eventemitter2 = _interopRequireDefault(_wolfy87Eventemitter);\n\nvar _utils = require('../utils');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nvar eventEmitter = exports.eventEmitter = new _wolfy87Eventemitter2['default']();\nexports['default'] = eventEmitter;\n/**\r\n * 注册事件监听\r\n * @param {string} eventName 事件名称\r\n * @param {array|function} callbacks 事件触发时调用的函数，\r\n * 支持数组传入多个函数。一般上willmount时进行注册，\r\n * 在didMount时调用off进行解除注册。\r\n */\n\nvar on = exports.on = function on(eventName, callbacks) {\n  if ((0, _utils.isFunction)(callbacks)) {\n    eventEmitter.addListener(eventName, callbacks);\n  } else if ((0, _utils.isArray)(callbacks)) {\n    eventEmitter.addListeners(eventName, callbacks);\n  } else {\n    console.error('类型错误： ', callbacks);\n  }\n};\n/**\r\n * 注册一次事件监听，只能触发一次trigger触发后即自动从监听中移除\r\n * @param {string} eventName 事件名称\r\n * @param {function} callback 事件触发时调用的函数\r\n */\n\n\nvar once = exports.once = function once(eventName, callback) {\n  if ((0, _utils.isFunction)(callback)) {\n    eventEmitter.addOnceListener(eventName, callback);\n  } else {\n    console.error('类型错误： ', callback);\n  }\n};\n/**\r\n * 移除事件监听\r\n * @param {string} eventName 事件名称\r\n * @param {array|function} callbacks 事件名称对应的函数\r\n */\n\n\nvar off = exports.off = function off(eventName, callbacks) {\n  if ((0, _utils.isFunction)(callbacks)) {\n    eventEmitter.removeListener(eventName, callbacks);\n  } else if ((0, _utils.isArray)(callbacks)) {\n    eventEmitter.removeListeners(eventName, callbacks);\n  } else {\n    console.error('类型错误： ', callbacks);\n  }\n};\n/**\r\n * 触发事件\r\n * @param {string} eventName 事件名称\r\n * @param {obj} args 需要传递的参数\r\n */\n\n\nvar trigger = exports.trigger = function trigger(eventName) {\n  for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  eventEmitter.emitEvent(eventName, args);\n};","map":null,"metadata":{},"sourceType":"script"}