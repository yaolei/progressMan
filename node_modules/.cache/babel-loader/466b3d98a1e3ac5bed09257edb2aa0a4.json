{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.create = create;\n\nvar _getIterator2 = _interopRequireDefault(require(\"@babel/runtime/core-js/get-iterator\"));\n\nvar _keys = _interopRequireDefault(require(\"@babel/runtime/core-js/object/keys\"));\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nvar _redux = require(\"redux\");\n\nvar _middleware = _interopRequireDefault(require(\"redux-saga/lib/internal/middleware\"));\n\nvar _invariant = _interopRequireDefault(require(\"invariant\"));\n\nvar _checkModel = _interopRequireDefault(require(\"./checkModel\"));\n\nvar _prefixNamespace = _interopRequireDefault(require(\"./prefixNamespace\"));\n\nvar _Plugin = _interopRequireWildcard(require(\"./Plugin\"));\n\nvar _createStore = _interopRequireDefault(require(\"./createStore\"));\n\nvar _getSaga = _interopRequireDefault(require(\"./getSaga\"));\n\nvar _getReducer = _interopRequireDefault(require(\"./getReducer\"));\n\nvar _createPromiseMiddleware = _interopRequireDefault(require(\"./createPromiseMiddleware\"));\n\nvar _subscription = require(\"./subscription\");\n\nvar _utils = require(\"./utils\"); // Internal model to update global state when do unmodel\n\n\nvar dvaModel = {\n  namespace: '@@dva',\n  state: 0,\n  reducers: {\n    UPDATE: function UPDATE(state) {\n      return state + 1;\n    }\n  }\n};\n/**\n * Create dva-core instance.\n *\n * @param hooksAndOpts\n * @param createOpts\n */\n\nfunction create() {\n  var hooksAndOpts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var createOpts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var initialReducer = createOpts.initialReducer,\n      _createOpts$setupApp = createOpts.setupApp,\n      setupApp = _createOpts$setupApp === void 0 ? _utils.noop : _createOpts$setupApp;\n  var plugin = new _Plugin.default();\n  plugin.use((0, _Plugin.filterHooks)(hooksAndOpts));\n  var app = {\n    _models: [(0, _prefixNamespace.default)((0, _objectSpread2.default)({}, dvaModel))],\n    _store: null,\n    _plugin: plugin,\n    use: plugin.use.bind(plugin),\n    model: model,\n    start: start\n  };\n  return app;\n  /**\n   * Register model before app is started.\n   *\n   * @param m {Object} model to register\n   */\n\n  function model(m) {\n    if (process.env.NODE_ENV !== 'production') {\n      (0, _checkModel.default)(m, app._models);\n    }\n\n    var prefixedModel = (0, _prefixNamespace.default)((0, _objectSpread2.default)({}, m));\n\n    app._models.push(prefixedModel);\n\n    return prefixedModel;\n  }\n  /**\n   * Inject model after app is started.\n   *\n   * @param createReducer\n   * @param onError\n   * @param unlisteners\n   * @param m\n   */\n\n\n  function injectModel(createReducer, onError, unlisteners, m) {\n    m = model(m);\n    var store = app._store;\n    store.asyncReducers[m.namespace] = (0, _getReducer.default)(m.reducers, m.state, plugin._handleActions);\n    store.replaceReducer(createReducer());\n\n    if (m.effects) {\n      store.runSaga(app._getSaga(m.effects, m, onError, plugin.get('onEffect')));\n    }\n\n    if (m.subscriptions) {\n      unlisteners[m.namespace] = (0, _subscription.run)(m.subscriptions, m, app, onError);\n    }\n  }\n  /**\n   * Unregister model.\n   *\n   * @param createReducer\n   * @param reducers\n   * @param unlisteners\n   * @param namespace\n   *\n   * Unexpected key warn problem:\n   * https://github.com/reactjs/redux/issues/1636\n   */\n\n\n  function unmodel(createReducer, reducers, unlisteners, namespace) {\n    var store = app._store; // Delete reducers\n\n    delete store.asyncReducers[namespace];\n    delete reducers[namespace];\n    store.replaceReducer(createReducer());\n    store.dispatch({\n      type: '@@dva/UPDATE'\n    }); // Cancel effects\n\n    store.dispatch({\n      type: \"\".concat(namespace, \"/@@CANCEL_EFFECTS\")\n    }); // Unlisten subscrioptions\n\n    (0, _subscription.unlisten)(unlisteners, namespace); // Delete model from app._models\n\n    app._models = app._models.filter(function (model) {\n      return model.namespace !== namespace;\n    });\n  }\n  /**\n   * Replace a model if it exsits, if not, add it to app\n   * Attention:\n   * - Only available after dva.start gets called\n   * - Will not check origin m is strict equal to the new one\n   * Useful for HMR\n   * @param createReducer\n   * @param reducers\n   * @param unlisteners\n   * @param onError\n   * @param m\n   */\n\n\n  function replaceModel(createReducer, reducers, unlisteners, onError, m) {\n    var store = app._store;\n    var namespace = m.namespace;\n    var oldModelIdx = (0, _utils.findIndex)(app._models, function (model) {\n      return model.namespace === namespace;\n    });\n\n    if (~oldModelIdx) {\n      // Cancel effects\n      store.dispatch({\n        type: \"\".concat(namespace, \"/@@CANCEL_EFFECTS\")\n      }); // Delete reducers\n\n      delete store.asyncReducers[namespace];\n      delete reducers[namespace]; // Unlisten subscrioptions\n\n      (0, _subscription.unlisten)(unlisteners, namespace); // Delete model from app._models\n\n      app._models.splice(oldModelIdx, 1);\n    } // add new version model to store\n\n\n    app.model(m);\n    store.dispatch({\n      type: '@@dva/UPDATE'\n    });\n  }\n  /**\n   * Start the app.\n   *\n   * @returns void\n   */\n\n\n  function start() {\n    // Global error handler\n    var onError = function onError(err, extension) {\n      if (err) {\n        if (typeof err === 'string') err = new Error(err);\n\n        err.preventDefault = function () {\n          err._dontReject = true;\n        };\n\n        plugin.apply('onError', function (err) {\n          throw new Error(err.stack || err);\n        })(err, app._store.dispatch, extension);\n      }\n    };\n\n    var sagaMiddleware = (0, _middleware.default)();\n    var promiseMiddleware = (0, _createPromiseMiddleware.default)(app);\n    app._getSaga = _getSaga.default.bind(null);\n    var sagas = [];\n    var reducers = (0, _objectSpread2.default)({}, initialReducer);\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = (0, _getIterator2.default)(app._models), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var m = _step.value;\n        reducers[m.namespace] = (0, _getReducer.default)(m.reducers, m.state, plugin._handleActions);\n        if (m.effects) sagas.push(app._getSaga(m.effects, m, onError, plugin.get('onEffect')));\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    var reducerEnhancer = plugin.get('onReducer');\n    var extraReducers = plugin.get('extraReducers');\n    (0, _invariant.default)((0, _keys.default)(extraReducers).every(function (key) {\n      return !(key in reducers);\n    }), \"[app.start] extraReducers is conflict with other reducers, reducers list: \".concat((0, _keys.default)(reducers).join(', '))); // Create store\n\n    var store = app._store = (0, _createStore.default)({\n      // eslint-disable-line\n      reducers: createReducer(),\n      initialState: hooksAndOpts.initialState || {},\n      plugin: plugin,\n      createOpts: createOpts,\n      sagaMiddleware: sagaMiddleware,\n      promiseMiddleware: promiseMiddleware\n    }); // Extend store\n\n    store.runSaga = sagaMiddleware.run;\n    store.asyncReducers = {}; // Execute listeners when state is changed\n\n    var listeners = plugin.get('onStateChange');\n    var _iteratorNormalCompletion2 = true;\n    var _didIteratorError2 = false;\n    var _iteratorError2 = undefined;\n\n    try {\n      var _loop = function _loop() {\n        var listener = _step2.value;\n        store.subscribe(function () {\n          listener(store.getState());\n        });\n      };\n\n      for (var _iterator2 = (0, _getIterator2.default)(listeners), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n        _loop();\n      } // Run sagas\n\n    } catch (err) {\n      _didIteratorError2 = true;\n      _iteratorError2 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n          _iterator2.return();\n        }\n      } finally {\n        if (_didIteratorError2) {\n          throw _iteratorError2;\n        }\n      }\n    }\n\n    sagas.forEach(sagaMiddleware.run); // Setup app\n\n    setupApp(app); // Run subscriptions\n\n    var unlisteners = {};\n    var _iteratorNormalCompletion3 = true;\n    var _didIteratorError3 = false;\n    var _iteratorError3 = undefined;\n\n    try {\n      for (var _iterator3 = (0, _getIterator2.default)(this._models), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n        var _model = _step3.value;\n\n        if (_model.subscriptions) {\n          unlisteners[_model.namespace] = (0, _subscription.run)(_model.subscriptions, _model, app, onError);\n        }\n      } // Setup app.model and app.unmodel\n\n    } catch (err) {\n      _didIteratorError3 = true;\n      _iteratorError3 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n          _iterator3.return();\n        }\n      } finally {\n        if (_didIteratorError3) {\n          throw _iteratorError3;\n        }\n      }\n    }\n\n    app.model = injectModel.bind(app, createReducer, onError, unlisteners);\n    app.unmodel = unmodel.bind(app, createReducer, reducers, unlisteners);\n    app.replaceModel = replaceModel.bind(app, createReducer, reducers, unlisteners, onError);\n    /**\n     * Create global reducer for redux.\n     *\n     * @returns {Object}\n     */\n\n    function createReducer() {\n      return reducerEnhancer((0, _redux.combineReducers)((0, _objectSpread2.default)({}, reducers, extraReducers, app._store ? app._store.asyncReducers : {})));\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"script"}