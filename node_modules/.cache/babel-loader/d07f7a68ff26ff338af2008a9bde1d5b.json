{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.run = run;\nexports.unlisten = unlisten;\n\nvar _getIterator2 = _interopRequireDefault(require(\"@babel/runtime/core-js/get-iterator\"));\n\nvar _warning = _interopRequireDefault(require(\"warning\"));\n\nvar _utils = require(\"./utils\");\n\nvar _prefixedDispatch = _interopRequireDefault(require(\"./prefixedDispatch\"));\n\nfunction run(subs, model, app, onError) {\n  var funcs = [];\n  var nonFuncs = [];\n\n  for (var key in subs) {\n    if (Object.prototype.hasOwnProperty.call(subs, key)) {\n      var sub = subs[key];\n      var unlistener = sub({\n        dispatch: (0, _prefixedDispatch.default)(app._store.dispatch, model),\n        history: app._history\n      }, onError);\n\n      if ((0, _utils.isFunction)(unlistener)) {\n        funcs.push(unlistener);\n      } else {\n        nonFuncs.push(key);\n      }\n    }\n  }\n\n  return {\n    funcs: funcs,\n    nonFuncs: nonFuncs\n  };\n}\n\nfunction unlisten(unlisteners, namespace) {\n  if (!unlisteners[namespace]) return;\n  var _unlisteners$namespac = unlisteners[namespace],\n      funcs = _unlisteners$namespac.funcs,\n      nonFuncs = _unlisteners$namespac.nonFuncs;\n  (0, _warning.default)(nonFuncs.length === 0, \"[app.unmodel] subscription should return unlistener function, check these subscriptions \".concat(nonFuncs.join(', ')));\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = (0, _getIterator2.default)(funcs), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var unlistener = _step.value;\n      unlistener();\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  delete unlisteners[namespace];\n}","map":null,"metadata":{},"sourceType":"script"}