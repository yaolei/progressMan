{"ast":null,"code":"var _jsxFileName = \"/Users/evan/progressMan/src/routes/Widgets/Charts/G2/components/Scatter.js\";\nimport React from 'react';\nimport G2 from 'components/Charts/G2';\nvar Chart = G2.Chart,\n    Axis = G2.Axis,\n    Geom = G2.Geom,\n    Tooltip = G2.Tooltip,\n    Legend = G2.Legend;\nvar gender = ['male', 'female'];\n\nfunction getNumberInNormalDistribution(mean, std_dev) {\n  return mean + randomNormalDistribution() * std_dev;\n}\n\nfunction randomNormalDistribution() {\n  var u = 0.0,\n      v = 0.0,\n      w = 0.0,\n      c = 0.0;\n\n  do {\n    //获得两个（-1,1）的独立随机变量\n    u = Math.random() * 2 - 1.0;\n    v = Math.random() * 2 - 1.0;\n    w = u * u + v * v;\n  } while (w === 0.0 || w >= 1.0); //这里就是 Box-Muller转换\n\n\n  c = Math.sqrt(-2 * Math.log(w) / w); //返回2个标准正态分布的随机数，封装进一个数组返回\n  //当然，因为这个函数运行较快，也可以扔掉一个\n  //return [u*c,v*c];\n\n  return (u * c).toFixed(2);\n}\n\nfunction genData(n) {\n  var data = [];\n\n  for (var index = 0; index < n; index++) {\n    data.push({\n      gender: gender[index % 2],\n      height: getNumberInNormalDistribution(180, 20),\n      weight: getNumberInNormalDistribution(70, 20)\n    });\n  }\n\n  return data;\n}\n\nexport default (function (props) {\n  return React.createElement(Chart, {\n    data: genData(500),\n    forceFit: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, React.createElement(Tooltip, {\n    showTitle: false,\n    crosshairs: {\n      type: 'cross'\n    },\n    itemTpl: \"<li data-index={index} style=\\\"margin-bottom:4px;\\\"><span style=\\\"background-color:{color};\\\" class=\\\"g2-tooltip-marker\\\"></span>{name}<br/>{value}</li>\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }), React.createElement(Axis, {\n    name: \"height\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }), React.createElement(Axis, {\n    name: \"weight\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }), React.createElement(Legend, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }), React.createElement(Geom, {\n    type: \"point\",\n    position: \"height*weight\",\n    color: \"gender\",\n    opacity: 0.65,\n    shape: \"circle\",\n    size: 4,\n    tooltip: ['gender*height*weight', function (gender, height, weight) {\n      return {\n        name: gender,\n        value: height + '(cm), ' + weight + '(kg)'\n      };\n    }],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }));\n});","map":{"version":3,"sources":["/Users/evan/progressMan/src/routes/Widgets/Charts/G2/components/Scatter.js"],"names":["React","G2","Chart","Axis","Geom","Tooltip","Legend","gender","getNumberInNormalDistribution","mean","std_dev","randomNormalDistribution","u","v","w","c","Math","random","sqrt","log","toFixed","genData","n","data","index","push","height","weight","props","type","name","value"],"mappings":"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","sourcesContent":["import React from 'react';\nimport G2 from 'components/Charts/G2';\nconst { Chart, Axis, Geom, Tooltip, Legend } = G2;\n\nconst gender = ['male', 'female'];\nfunction getNumberInNormalDistribution(mean, std_dev) {\n  return mean + randomNormalDistribution() * std_dev;\n}\n\nfunction randomNormalDistribution() {\n  var u = 0.0,\n    v = 0.0,\n    w = 0.0,\n    c = 0.0;\n  do {\n    //获得两个（-1,1）的独立随机变量\n    u = Math.random() * 2 - 1.0;\n    v = Math.random() * 2 - 1.0;\n    w = u * u + v * v;\n  } while (w === 0.0 || w >= 1.0);\n  //这里就是 Box-Muller转换\n  c = Math.sqrt((-2 * Math.log(w)) / w);\n  //返回2个标准正态分布的随机数，封装进一个数组返回\n  //当然，因为这个函数运行较快，也可以扔掉一个\n  //return [u*c,v*c];\n  return (u * c).toFixed(2);\n}\n\nfunction genData(n) {\n  const data = [];\n  for (let index = 0; index < n; index++) {\n    data.push({\n      gender: gender[index % 2],\n      height: getNumberInNormalDistribution(180, 20),\n      weight: getNumberInNormalDistribution(70, 20)\n    });\n  }\n  return data;\n}\n\nexport default props => (\n  <Chart data={genData(500)} forceFit>\n    <Tooltip\n      showTitle={false}\n      crosshairs={{ type: 'cross' }}\n      itemTpl=\"<li data-index={index} style=&quot;margin-bottom:4px;&quot;><span style=&quot;background-color:{color};&quot; class=&quot;g2-tooltip-marker&quot;></span>{name}<br/>{value}</li>\"\n    />\n    <Axis name=\"height\" />\n    <Axis name=\"weight\" />\n    <Legend />\n    <Geom\n      type=\"point\"\n      position=\"height*weight\"\n      color=\"gender\"\n      opacity={0.65}\n      shape=\"circle\"\n      size={4}\n      tooltip={[\n        'gender*height*weight',\n        (gender, height, weight) => {\n          return {\n            name: gender,\n            value: height + '(cm), ' + weight + '(kg)'\n          };\n        }\n      ]}\n    />\n  </Chart>\n);\n"]},"metadata":{},"sourceType":"module"}