{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getSaga;\n\nvar _getIterator2 = _interopRequireDefault(require(\"@babel/runtime/core-js/get-iterator\"));\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _invariant = _interopRequireDefault(require(\"invariant\"));\n\nvar sagaEffects = _interopRequireWildcard(require(\"redux-saga/lib/effects\"));\n\nvar _warning = _interopRequireDefault(require(\"warning\"));\n\nvar _sagaHelpers = require(\"redux-saga/lib/internal/sagaHelpers\");\n\nvar _constants = require(\"./constants\");\n\nvar _prefixType = _interopRequireDefault(require(\"./prefixType\"));\n\nfunction getSaga(effects, model, onError, onEffect) {\n  return (\n    /*#__PURE__*/\n    _regenerator.default.mark(function _callee3() {\n      var key;\n      return _regenerator.default.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.t0 = _regenerator.default.keys(effects);\n\n            case 1:\n              if ((_context3.t1 = _context3.t0()).done) {\n                _context3.next = 7;\n                break;\n              }\n\n              key = _context3.t1.value;\n\n              if (!Object.prototype.hasOwnProperty.call(effects, key)) {\n                _context3.next = 5;\n                break;\n              }\n\n              return _context3.delegateYield(\n              /*#__PURE__*/\n              _regenerator.default.mark(function _callee2() {\n                var watcher, task;\n                return _regenerator.default.wrap(function _callee2$(_context2) {\n                  while (1) {\n                    switch (_context2.prev = _context2.next) {\n                      case 0:\n                        watcher = getWatcher(key, effects[key], model, onError, onEffect);\n                        _context2.next = 3;\n                        return sagaEffects.fork(watcher);\n\n                      case 3:\n                        task = _context2.sent;\n                        _context2.next = 6;\n                        return sagaEffects.fork(\n                        /*#__PURE__*/\n                        _regenerator.default.mark(function _callee() {\n                          return _regenerator.default.wrap(function _callee$(_context) {\n                            while (1) {\n                              switch (_context.prev = _context.next) {\n                                case 0:\n                                  _context.next = 2;\n                                  return sagaEffects.take(\"\".concat(model.namespace, \"/@@CANCEL_EFFECTS\"));\n\n                                case 2:\n                                  _context.next = 4;\n                                  return sagaEffects.cancel(task);\n\n                                case 4:\n                                case \"end\":\n                                  return _context.stop();\n                              }\n                            }\n                          }, _callee, this);\n                        }));\n\n                      case 6:\n                      case \"end\":\n                        return _context2.stop();\n                    }\n                  }\n                }, _callee2, this);\n              })(), \"t2\", 5);\n\n            case 5:\n              _context3.next = 1;\n              break;\n\n            case 7:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    })\n  );\n}\n\nfunction getWatcher(key, _effect, model, onError, onEffect) {\n  var _marked =\n  /*#__PURE__*/\n  _regenerator.default.mark(sagaWithCatch);\n\n  var effect = _effect;\n  var type = 'takeEvery';\n  var ms;\n\n  if (Array.isArray(_effect)) {\n    effect = _effect[0];\n    var opts = _effect[1];\n\n    if (opts && opts.type) {\n      type = opts.type;\n\n      if (type === 'throttle') {\n        (0, _invariant.default)(opts.ms, 'app.start: opts.ms should be defined if type is throttle');\n        ms = opts.ms;\n      }\n    }\n\n    (0, _invariant.default)(['watcher', 'takeEvery', 'takeLatest', 'throttle'].indexOf(type) > -1, 'app.start: effect type should be takeEvery, takeLatest, throttle or watcher');\n  }\n\n  function noop() {}\n\n  function sagaWithCatch() {\n    var _len,\n        args,\n        _key,\n        _ref,\n        _ref$__dva_resolve,\n        resolve,\n        _ref$__dva_reject,\n        reject,\n        ret,\n        _args4 = arguments;\n\n    return _regenerator.default.wrap(function sagaWithCatch$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            for (_len = _args4.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n              args[_key] = _args4[_key];\n            }\n\n            _ref = args.length > 0 ? args[0] : {}, _ref$__dva_resolve = _ref.__dva_resolve, resolve = _ref$__dva_resolve === void 0 ? noop : _ref$__dva_resolve, _ref$__dva_reject = _ref.__dva_reject, reject = _ref$__dva_reject === void 0 ? noop : _ref$__dva_reject;\n            _context4.prev = 2;\n            _context4.next = 5;\n            return sagaEffects.put({\n              type: \"\".concat(key).concat(_constants.NAMESPACE_SEP, \"@@start\")\n            });\n\n          case 5:\n            _context4.next = 7;\n            return effect.apply(void 0, (0, _toConsumableArray2.default)(args.concat(createEffects(model))));\n\n          case 7:\n            ret = _context4.sent;\n            _context4.next = 10;\n            return sagaEffects.put({\n              type: \"\".concat(key).concat(_constants.NAMESPACE_SEP, \"@@end\")\n            });\n\n          case 10:\n            resolve(ret);\n            _context4.next = 17;\n            break;\n\n          case 13:\n            _context4.prev = 13;\n            _context4.t0 = _context4[\"catch\"](2);\n            onError(_context4.t0, {\n              key: key,\n              effectArgs: args\n            });\n\n            if (!_context4.t0._dontReject) {\n              reject(_context4.t0);\n            }\n\n          case 17:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _marked, this, [[2, 13]]);\n  }\n\n  var sagaWithOnEffect = applyOnEffect(onEffect, sagaWithCatch, model, key);\n\n  switch (type) {\n    case 'watcher':\n      return sagaWithCatch;\n\n    case 'takeLatest':\n      return (\n        /*#__PURE__*/\n        _regenerator.default.mark(function _callee4() {\n          return _regenerator.default.wrap(function _callee4$(_context5) {\n            while (1) {\n              switch (_context5.prev = _context5.next) {\n                case 0:\n                  _context5.next = 2;\n                  return (0, _sagaHelpers.takeLatestHelper)(key, sagaWithOnEffect);\n\n                case 2:\n                case \"end\":\n                  return _context5.stop();\n              }\n            }\n          }, _callee4, this);\n        })\n      );\n\n    case 'throttle':\n      return (\n        /*#__PURE__*/\n        _regenerator.default.mark(function _callee5() {\n          return _regenerator.default.wrap(function _callee5$(_context6) {\n            while (1) {\n              switch (_context6.prev = _context6.next) {\n                case 0:\n                  _context6.next = 2;\n                  return (0, _sagaHelpers.throttleHelper)(ms, key, sagaWithOnEffect);\n\n                case 2:\n                case \"end\":\n                  return _context6.stop();\n              }\n            }\n          }, _callee5, this);\n        })\n      );\n\n    default:\n      return (\n        /*#__PURE__*/\n        _regenerator.default.mark(function _callee6() {\n          return _regenerator.default.wrap(function _callee6$(_context7) {\n            while (1) {\n              switch (_context7.prev = _context7.next) {\n                case 0:\n                  _context7.next = 2;\n                  return (0, _sagaHelpers.takeEveryHelper)(key, sagaWithOnEffect);\n\n                case 2:\n                case \"end\":\n                  return _context7.stop();\n              }\n            }\n          }, _callee6, this);\n        })\n      );\n  }\n}\n\nfunction createEffects(model) {\n  function assertAction(type, name) {\n    (0, _invariant.default)(type, 'dispatch: action should be a plain Object with type');\n    (0, _warning.default)(type.indexOf(\"\".concat(model.namespace).concat(_constants.NAMESPACE_SEP)) !== 0, \"[\".concat(name, \"] \").concat(type, \" should not be prefixed with namespace \").concat(model.namespace));\n  }\n\n  function put(action) {\n    var type = action.type;\n    assertAction(type, 'sagaEffects.put');\n    return sagaEffects.put((0, _objectSpread2.default)({}, action, {\n      type: (0, _prefixType.default)(type, model)\n    }));\n  } // The operator `put` doesn't block waiting the returned promise to resolve.\n  // Using `put.resolve` will wait until the promsie resolve/reject before resuming.\n  // It will be helpful to organize multi-effects in order,\n  // and increase the reusability by seperate the effect in stand-alone pieces.\n  // https://github.com/redux-saga/redux-saga/issues/336\n\n\n  function putResolve(action) {\n    var type = action.type;\n    assertAction(type, 'sagaEffects.put.resolve');\n    return sagaEffects.put.resolve((0, _objectSpread2.default)({}, action, {\n      type: (0, _prefixType.default)(type, model)\n    }));\n  }\n\n  put.resolve = putResolve;\n\n  function take(type) {\n    if (typeof type === 'string') {\n      assertAction(type, 'sagaEffects.take');\n      return sagaEffects.take((0, _prefixType.default)(type, model));\n    } else if (Array.isArray(type)) {\n      return sagaEffects.take(type.map(function (t) {\n        if (typeof t === 'string') {\n          assertAction(t, 'sagaEffects.take');\n          return (0, _prefixType.default)(t, model);\n        }\n\n        return t;\n      }));\n    } else {\n      return sagaEffects.take(type);\n    }\n  }\n\n  return (0, _objectSpread2.default)({}, sagaEffects, {\n    put: put,\n    take: take\n  });\n}\n\nfunction applyOnEffect(fns, effect, model, key) {\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = (0, _getIterator2.default)(fns), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var fn = _step.value;\n      effect = fn(effect, sagaEffects, model, key);\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return effect;\n}","map":null,"metadata":{},"sourceType":"script"}