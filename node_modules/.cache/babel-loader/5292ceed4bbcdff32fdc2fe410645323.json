{"ast":null,"code":"import _defineProperty from \"/Users/evan/progressMan/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"/Users/evan/progressMan/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _objectWithoutProperties from \"/Users/evan/progressMan/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _objectSpread from \"/Users/evan/progressMan/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"/Users/evan/progressMan/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport $$, { request } from 'cmn-utils';\nimport objectAssign from 'object-assign';\nimport PageInfo from './pageHelper/PageInfo';\nimport config from '@/config';\nvar REQUEST = '@request';\nvar REQUEST_SUCCESS = '@request_success';\nvar REQUEST_ERROR = '@request_error';\n/**\n * 如果单纯想改变一个状态可以在页面中用这个action\n * dispatch({\n *   type: 'crud/@change',\n *   payload: {\n *     showModal: true,\n *   },\n *   success: () => {\n *     console.log('state updated!')\n *   }\n * })\n */\n\nvar CHANGE_STATE = '@change';\nvar CHANGE_STATE_SUCCESS = '@change_success';\n/**\n * 封装service中的异步方法，如在model中使用\n   const url = '/getPageList';\n   const pageInfo = yield call(asyncRequest, {...payload, url});\n   yield put({\n     type: 'getPageListSuccess',\n     payload: pageInfo\n   });\n * @param {*} payload \n */\n\nexport function asyncRequest(_x) {\n  return _asyncRequest.apply(this, arguments);\n}\n\nfunction _asyncRequest() {\n  _asyncRequest = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee3(payload) {\n    var url, pageInfo, other, pageNum, pageSize, filters, sorts, data, _promise;\n\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            if (!(!payload || !payload.url)) {\n              _context3.next = 2;\n              break;\n            }\n\n            throw new Error('payload require contains url opt');\n\n          case 2:\n            /**\n             * other中可以配置 method headers data 等参数\n             */\n            url = payload.url, pageInfo = payload.pageInfo, other = _objectWithoutProperties(payload, [\"url\", \"pageInfo\"]); // 如果是分页查询 (格式化发送参数)\n\n            if (pageInfo && pageInfo instanceof PageInfo) {\n              pageNum = pageInfo.pageNum, pageSize = pageInfo.pageSize, filters = pageInfo.filters, sorts = pageInfo.sorts;\n              data = {\n                pageNum: pageNum,\n                pageSize: pageSize,\n                filters: filters,\n                sorts: sorts\n              };\n\n              if ($$.isFunction(config.pageHelper.requestFormat)) {\n                data = config.pageHelper.requestFormat(pageInfo);\n              }\n\n              other.data = data;\n            }\n\n            _promise = other.method ? request[other.method.toLowerCase()](url, other.data, other) : request.send(url, other); // 如果是分页查询（格式化反回结果）\n\n            if (!(pageInfo && pageInfo instanceof PageInfo)) {\n              _context3.next = 9;\n              break;\n            }\n\n            return _context3.abrupt(\"return\", _promise.then(function (resp) {\n              if ($$.isFunction(config.pageHelper.responseFormat)) {\n                var newPageInfo = config.pageHelper.responseFormat(resp); // 生成新实例，防止新老指向同一个实例问题\n\n                return objectAssign(new PageInfo(), pageInfo, newPageInfo);\n              }\n            }));\n\n          case 9:\n            return _context3.abrupt(\"return\", _promise);\n\n          case 10:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _asyncRequest.apply(this, arguments);\n}\n\nexport var simpleModel = {\n  namespace: $$.randomStr(4),\n  enhance: true,\n  state: {},\n  effects: {},\n  reducers: {}\n};\nexport default (function (model) {\n  var _objectSpread2, _objectSpread3;\n\n  var _simpleModel$model = _objectSpread({}, simpleModel, model),\n      namespace = _simpleModel$model.namespace,\n      state = _simpleModel$model.state,\n      subscriptions = _simpleModel$model.subscriptions,\n      effects = _simpleModel$model.effects,\n      reducers = _simpleModel$model.reducers,\n      enhance = _simpleModel$model.enhance;\n\n  if (!enhance) {\n    return {\n      namespace: namespace,\n      state: state,\n      subscriptions: subscriptions,\n      effects: effects,\n      reducers: reducers\n    };\n  }\n\n  return {\n    namespace: namespace,\n    state: state,\n    subscriptions: subscriptions,\n    effects: _objectSpread({}, effects, (_objectSpread2 = {}, _defineProperty(_objectSpread2, REQUEST,\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(_ref, _ref2) {\n      var payload, success, error, afterResponse, call, put, _payloads, resultState, i, _payloads$i, valueField, notice, actionType, otherPayload, response, _r;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              payload = _ref.payload, success = _ref.success, error = _ref.error, afterResponse = _ref.afterResponse;\n              call = _ref2.call, put = _ref2.put;\n              _payloads = [];\n\n              if ($$.isObject(payload)) {\n                _payloads.push(payload);\n              } else if ($$.isArray(payload)) {\n                _payloads = payload;\n              }\n\n              resultState = {\n                success: {},\n                error: {}\n              };\n              i = 0;\n\n            case 6:\n              if (!(i < _payloads.length)) {\n                _context.next = 33;\n                break;\n              }\n\n              /**\n               * valueField: 返回结果将使用valueField字段的值来接收\n               * notice: 弹出通知\n               * actionType: 如果存在actionType, 则表示自已处理reducer,值为 actionType + ('_SUCCESS' | '_ERROR')\n               */\n              _payloads$i = _payloads[i], valueField = _payloads$i.valueField, notice = _payloads$i.notice, actionType = _payloads$i.actionType, otherPayload = _objectWithoutProperties(_payloads$i, [\"valueField\", \"notice\", \"actionType\"]);\n              _context.prev = 8;\n              _context.next = 11;\n              return call(asyncRequest, otherPayload);\n\n            case 11:\n              response = _context.sent;\n\n              // 自已处理反回的数据，模拟reduce中的操作，这里不要写有副作用的函数\n              if ($$.isFunction(afterResponse)) {\n                _r = afterResponse(response);\n                if (_r) response = _r;\n              } // 如果需要回调\n\n\n              if (otherPayload.success) {\n                otherPayload.success(response);\n              } // 如果需要通知功能\n\n\n              if (notice) {\n                config.notice.success(notice === true ? '操作成功' : notice[0]);\n              } // 如果存在actionType,则表示自已处理reducer\n\n\n              if (!actionType) {\n                _context.next = 20;\n                break;\n              }\n\n              _context.next = 18;\n              return put({\n                type: \"\".concat(actionType, \"_SUCCESS\"),\n                payload: response\n              });\n\n            case 18:\n              _context.next = 21;\n              break;\n\n            case 20:\n              // 准备返回值\n              resultState.success[valueField || '_@fake_'] = response;\n\n            case 21:\n              _context.next = 30;\n              break;\n\n            case 23:\n              _context.prev = 23;\n              _context.t0 = _context[\"catch\"](8);\n              resultState.error['error'] = _context.t0; // 如果需要内部回调\n\n              if ($$.isFunction(otherPayload.error)) {\n                otherPayload.error(_context.t0);\n              } else if ($$.isFunction(error)) {\n                error(_context.t0);\n              } // 通知reducer 如果存在actionType,则表示自已处理reducer\n\n\n              _context.next = 29;\n              return put({\n                type: actionType ? \"\".concat(actionType, \"_ERROR\") : REQUEST_ERROR,\n                payload: resultState.error\n              });\n\n            case 29:\n              return _context.abrupt(\"break\", 33);\n\n            case 30:\n              i++;\n              _context.next = 6;\n              break;\n\n            case 33:\n              if (!Object.keys(resultState.success).length) {\n                _context.next = 37;\n                break;\n              }\n\n              // 如果需要回调\n              if ($$.isFunction(success)) {\n                success(resultState.success);\n              }\n\n              _context.next = 37;\n              return put({\n                type: REQUEST_SUCCESS,\n                payload: resultState.success\n              });\n\n            case 37:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[8, 23]]);\n    })), _defineProperty(_objectSpread2, CHANGE_STATE,\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2(_ref3, _ref4) {\n      var payload, success, put;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              payload = _ref3.payload, success = _ref3.success;\n              put = _ref4.put;\n              _context2.next = 4;\n              return put({\n                type: CHANGE_STATE_SUCCESS,\n                payload: payload\n              });\n\n            case 4:\n              if ($$.isFunction(success)) {\n                success();\n              }\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    })), _objectSpread2)),\n    reducers: _objectSpread({}, reducers, (_objectSpread3 = {}, _defineProperty(_objectSpread3, REQUEST_SUCCESS, _changeState), _defineProperty(_objectSpread3, REQUEST_ERROR, _changeState), _defineProperty(_objectSpread3, CHANGE_STATE_SUCCESS, _changeState), _objectSpread3))\n  };\n});\n\nvar _changeState = function _changeState(state, _ref5) {\n  var payload = _ref5.payload;\n  return _objectSpread({}, state, payload);\n};","map":{"version":3,"sources":["/Users/evan/progressMan/src/utils/modelEnhance.js"],"names":["$$","request","objectAssign","PageInfo","config","REQUEST","REQUEST_SUCCESS","REQUEST_ERROR","CHANGE_STATE","CHANGE_STATE_SUCCESS","asyncRequest","payload","url","Error","pageInfo","other","pageNum","pageSize","filters","sorts","data","isFunction","pageHelper","requestFormat","_promise","method","toLowerCase","send","then","resp","responseFormat","newPageInfo","simpleModel","namespace","randomStr","enhance","state","effects","reducers","model","subscriptions","success","error","afterResponse","call","put","_payloads","isObject","push","isArray","resultState","i","length","valueField","notice","actionType","otherPayload","response","_r","type","Object","keys","_changeState"],"mappings":";;;;;AAAA,OAAOA,EAAP,IAAaC,OAAb,QAA4B,WAA5B;AACA,OAAOC,YAAP,MAAyB,eAAzB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA,IAAMC,OAAO,GAAG,UAAhB;AACA,IAAMC,eAAe,GAAG,kBAAxB;AACA,IAAMC,aAAa,GAAG,gBAAtB;AACA;;;;;;;;;;;;;AAYA,IAAMC,YAAY,GAAG,SAArB;AACA,IAAMC,oBAAoB,GAAG,iBAA7B;AAEA;;;;;;;;;;;AAUA,gBAAsBC,YAAtB;AAAA;AAAA;;;;;2BAAO,kBAA4BC,OAA5B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,kBACD,CAACA,OAAD,IAAY,CAACA,OAAO,CAACC,GADpB;AAAA;AAAA;AAAA;;AAAA,kBAEG,IAAIC,KAAJ,CAAU,kCAAV,CAFH;;AAAA;AAGL;;;AAGQD,YAAAA,GANH,GAM+BD,OAN/B,CAMGC,GANH,EAMQE,QANR,GAM+BH,OAN/B,CAMQG,QANR,EAMqBC,KANrB,4BAM+BJ,OAN/B,wBAQL;;AACA,gBAAIG,QAAQ,IAAIA,QAAQ,YAAYX,QAApC,EAA8C;AACpCa,cAAAA,OADoC,GACEF,QADF,CACpCE,OADoC,EAC3BC,QAD2B,GACEH,QADF,CAC3BG,QAD2B,EACjBC,OADiB,GACEJ,QADF,CACjBI,OADiB,EACRC,KADQ,GACEL,QADF,CACRK,KADQ;AAExCC,cAAAA,IAFwC,GAEjC;AAAEJ,gBAAAA,OAAO,EAAPA,OAAF;AAAWC,gBAAAA,QAAQ,EAARA,QAAX;AAAqBC,gBAAAA,OAAO,EAAPA,OAArB;AAA8BC,gBAAAA,KAAK,EAALA;AAA9B,eAFiC;;AAI5C,kBAAInB,EAAE,CAACqB,UAAH,CAAcjB,MAAM,CAACkB,UAAP,CAAkBC,aAAhC,CAAJ,EAAoD;AAClDH,gBAAAA,IAAI,GAAGhB,MAAM,CAACkB,UAAP,CAAkBC,aAAlB,CAAgCT,QAAhC,CAAP;AACD;;AACDC,cAAAA,KAAK,CAACK,IAAN,GAAaA,IAAb;AACD;;AAEKI,YAAAA,QAnBD,GAmBYT,KAAK,CAACU,MAAN,GACbxB,OAAO,CAACc,KAAK,CAACU,MAAN,CAAaC,WAAb,EAAD,CAAP,CAAoCd,GAApC,EAAyCG,KAAK,CAACK,IAA/C,EAAqDL,KAArD,CADa,GAEbd,OAAO,CAAC0B,IAAR,CAAaf,GAAb,EAAkBG,KAAlB,CArBC,EAuBL;;AAvBK,kBAwBDD,QAAQ,IAAIA,QAAQ,YAAYX,QAxB/B;AAAA;AAAA;AAAA;;AAAA,8CAyBIqB,QAAQ,CAACI,IAAT,CAAc,UAAAC,IAAI,EAAI;AAC3B,kBAAI7B,EAAE,CAACqB,UAAH,CAAcjB,MAAM,CAACkB,UAAP,CAAkBQ,cAAhC,CAAJ,EAAqD;AACnD,oBAAMC,WAAW,GAAG3B,MAAM,CAACkB,UAAP,CAAkBQ,cAAlB,CAAiCD,IAAjC,CAApB,CADmD,CAEnD;;AACA,uBAAO3B,YAAY,CAAC,IAAIC,QAAJ,EAAD,EAAiBW,QAAjB,EAA2BiB,WAA3B,CAAnB;AACD;AACF,aANM,CAzBJ;;AAAA;AAAA,8CAiCIP,QAjCJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAqCP,OAAO,IAAMQ,WAAW,GAAG;AACzBC,EAAAA,SAAS,EAAEjC,EAAE,CAACkC,SAAH,CAAa,CAAb,CADc;AAEzBC,EAAAA,OAAO,EAAE,IAFgB;AAGzBC,EAAAA,KAAK,EAAE,EAHkB;AAIzBC,EAAAA,OAAO,EAAE,EAJgB;AAKzBC,EAAAA,QAAQ,EAAE;AALe,CAApB;AAQP,gBAAe,UAAAC,KAAK,EAAI;AAAA;;AAAA,6CAEjBP,WAFiB,EAGjBO,KAHiB;AAAA,MACdN,SADc,sBACdA,SADc;AAAA,MACHG,KADG,sBACHA,KADG;AAAA,MACII,aADJ,sBACIA,aADJ;AAAA,MACmBH,OADnB,sBACmBA,OADnB;AAAA,MAC4BC,QAD5B,sBAC4BA,QAD5B;AAAA,MACsCH,OADtC,sBACsCA,OADtC;;AAMtB,MAAI,CAACA,OAAL,EAAc;AACZ,WAAO;AAAEF,MAAAA,SAAS,EAATA,SAAF;AAAaG,MAAAA,KAAK,EAALA,KAAb;AAAoBI,MAAAA,aAAa,EAAbA,aAApB;AAAmCH,MAAAA,OAAO,EAAPA,OAAnC;AAA4CC,MAAAA,QAAQ,EAARA;AAA5C,KAAP;AACD;;AACD,SAAO;AACLL,IAAAA,SAAS,EAATA,SADK;AAELG,IAAAA,KAAK,EAALA,KAFK;AAGLI,IAAAA,aAAa,EAAbA,aAHK;AAILH,IAAAA,OAAO,oBAEFA,OAFE,wDASHhC,OATG;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AASQM,cAAAA,OATR,QASQA,OATR,EASiB8B,OATjB,QASiBA,OATjB,EAS0BC,KAT1B,QAS0BA,KAT1B,EASiCC,aATjC,QASiCA,aATjC;AASoDC,cAAAA,IATpD,SASoDA,IATpD,EAS0DC,GAT1D,SAS0DA,GAT1D;AAUCC,cAAAA,SAVD,GAUa,EAVb;;AAWH,kBAAI9C,EAAE,CAAC+C,QAAH,CAAYpC,OAAZ,CAAJ,EAA0B;AACxBmC,gBAAAA,SAAS,CAACE,IAAV,CAAerC,OAAf;AACD,eAFD,MAEO,IAAIX,EAAE,CAACiD,OAAH,CAAWtC,OAAX,CAAJ,EAAyB;AAC9BmC,gBAAAA,SAAS,GAAGnC,OAAZ;AACD;;AAEKuC,cAAAA,WAjBH,GAiBiB;AAClBT,gBAAAA,OAAO,EAAE,EADS;AAElBC,gBAAAA,KAAK,EAAE;AAFW,eAjBjB;AAsBMS,cAAAA,CAtBN,GAsBU,CAtBV;;AAAA;AAAA,oBAsBaA,CAAC,GAAGL,SAAS,CAACM,MAtB3B;AAAA;AAAA;AAAA;;AAuBD;;;;;AAvBC,4BA4B2DN,SAAS,CAACK,CAAD,CA5BpE,EA4BOE,UA5BP,eA4BOA,UA5BP,EA4BmBC,MA5BnB,eA4BmBA,MA5BnB,EA4B2BC,UA5B3B,eA4B2BA,UA5B3B,EA4B0CC,YA5B1C;AAAA;AAAA;AA+BgB,qBAAMZ,IAAI,CAAClC,YAAD,EAAe8C,YAAf,CAAV;;AA/BhB;AA+BKC,cAAAA,QA/BL;;AAiCC;AACA,kBAAIzD,EAAE,CAACqB,UAAH,CAAcsB,aAAd,CAAJ,EAAkC;AAC5Be,gBAAAA,EAD4B,GACvBf,aAAa,CAACc,QAAD,CADU;AAEhC,oBAAIC,EAAJ,EAAQD,QAAQ,GAAGC,EAAX;AACT,eArCF,CAuCC;;;AACA,kBAAIF,YAAY,CAACf,OAAjB,EAA0B;AACxBe,gBAAAA,YAAY,CAACf,OAAb,CAAqBgB,QAArB;AACD,eA1CF,CA4CC;;;AACA,kBAAIH,MAAJ,EAAY;AACVlD,gBAAAA,MAAM,CAACkD,MAAP,CAAcb,OAAd,CAAsBa,MAAM,KAAK,IAAX,GAAkB,MAAlB,GAA2BA,MAAM,CAAC,CAAD,CAAvD;AACD,eA/CF,CAiDC;;;AAjDD,mBAkDKC,UAlDL;AAAA;AAAA;AAAA;;AAAA;AAmDG,qBAAMV,GAAG,CAAC;AACRc,gBAAAA,IAAI,YAAKJ,UAAL,aADI;AAER5C,gBAAAA,OAAO,EAAE8C;AAFD,eAAD,CAAT;;AAnDH;AAAA;AAAA;;AAAA;AAwDG;AACAP,cAAAA,WAAW,CAACT,OAAZ,CAAoBY,UAAU,IAAI,SAAlC,IAA+CI,QAA/C;;AAzDH;AAAA;AAAA;;AAAA;AAAA;AAAA;AA4DCP,cAAAA,WAAW,CAACR,KAAZ,CAAkB,OAAlB,gBA5DD,CA8DC;;AACA,kBAAI1C,EAAE,CAACqB,UAAH,CAAcmC,YAAY,CAACd,KAA3B,CAAJ,EAAuC;AACrCc,gBAAAA,YAAY,CAACd,KAAb;AACD,eAFD,MAEO,IAAI1C,EAAE,CAACqB,UAAH,CAAcqB,KAAd,CAAJ,EAA0B;AAC/BA,gBAAAA,KAAK,aAAL;AACD,eAnEF,CAqEC;;;AArED;AAsEC,qBAAMG,GAAG,CAAC;AACRc,gBAAAA,IAAI,EAAEJ,UAAU,aAAMA,UAAN,cAA2BhD,aADnC;AAERI,gBAAAA,OAAO,EAAEuC,WAAW,CAACR;AAFb,eAAD,CAAT;;AAtED;AAAA;;AAAA;AAsBmCS,cAAAA,CAAC,EAtBpC;AAAA;AAAA;;AAAA;AAAA,mBAgFCS,MAAM,CAACC,IAAP,CAAYX,WAAW,CAACT,OAAxB,EAAiCW,MAhFlC;AAAA;AAAA;AAAA;;AAiFD;AACA,kBAAIpD,EAAE,CAACqB,UAAH,CAAcoB,OAAd,CAAJ,EAA4B;AAC1BA,gBAAAA,OAAO,CAACS,WAAW,CAACT,OAAb,CAAP;AACD;;AApFA;AAsFD,qBAAMI,GAAG,CAAC;AACRc,gBAAAA,IAAI,EAAErD,eADE;AAERK,gBAAAA,OAAO,EAAEuC,WAAW,CAACT;AAFb,eAAD,CAAT;;AAtFC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCA6FHjC,YA7FG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA6FaG,cAAAA,OA7Fb,SA6FaA,OA7Fb,EA6FsB8B,OA7FtB,SA6FsBA,OA7FtB;AA6FmCI,cAAAA,GA7FnC,SA6FmCA,GA7FnC;AAAA;AA8FH,qBAAMA,GAAG,CAAC;AACRc,gBAAAA,IAAI,EAAElD,oBADE;AAERE,gBAAAA,OAAO,EAAPA;AAFQ,eAAD,CAAT;;AA9FG;AAmGH,kBAAIX,EAAE,CAACqB,UAAH,CAAcoB,OAAd,CAAJ,EAA4B;AAC1BA,gBAAAA,OAAO;AACR;;AArGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAJF;AA6GLH,IAAAA,QAAQ,oBAEHA,QAFG,wDAILhC,eAJK,EAIawD,YAJb,mCAKLvD,aALK,EAKWuD,YALX,mCAMLrD,oBANK,EAMkBqD,YANlB;AA7GH,GAAP;AAsHD,CA/HD;;AAiIA,IAAMA,YAAY,GAAG,SAAfA,YAAe,CAAC1B,KAAD;AAAA,MAAUzB,OAAV,SAAUA,OAAV;AAAA,2BAChByB,KADgB,EAEhBzB,OAFgB;AAAA,CAArB","sourcesContent":["import $$, { request } from 'cmn-utils';\nimport objectAssign from 'object-assign';\nimport PageInfo from './pageHelper/PageInfo';\nimport config from '@/config';\n\nconst REQUEST = '@request';\nconst REQUEST_SUCCESS = '@request_success';\nconst REQUEST_ERROR = '@request_error';\n/**\n * 如果单纯想改变一个状态可以在页面中用这个action\n * dispatch({\n *   type: 'crud/@change',\n *   payload: {\n *     showModal: true,\n *   },\n *   success: () => {\n *     console.log('state updated!')\n *   }\n * })\n */\nconst CHANGE_STATE = '@change';\nconst CHANGE_STATE_SUCCESS = '@change_success';\n\n/**\n * 封装service中的异步方法，如在model中使用\n   const url = '/getPageList';\n   const pageInfo = yield call(asyncRequest, {...payload, url});\n   yield put({\n     type: 'getPageListSuccess',\n     payload: pageInfo\n   });\n * @param {*} payload \n */\nexport async function asyncRequest(payload) {\n  if (!payload || !payload.url)\n    throw new Error('payload require contains url opt');\n  /**\n   * other中可以配置 method headers data 等参数\n   */\n  const { url, pageInfo, ...other } = payload;\n\n  // 如果是分页查询 (格式化发送参数)\n  if (pageInfo && pageInfo instanceof PageInfo) {\n    const { pageNum, pageSize, filters, sorts } = pageInfo;\n    let data = { pageNum, pageSize, filters, sorts };\n\n    if ($$.isFunction(config.pageHelper.requestFormat)) {\n      data = config.pageHelper.requestFormat(pageInfo);\n    }\n    other.data = data;\n  }\n\n  const _promise = other.method\n    ? request[other.method.toLowerCase()](url, other.data, other)\n    : request.send(url, other);\n\n  // 如果是分页查询（格式化反回结果）\n  if (pageInfo && pageInfo instanceof PageInfo) {\n    return _promise.then(resp => {\n      if ($$.isFunction(config.pageHelper.responseFormat)) {\n        const newPageInfo = config.pageHelper.responseFormat(resp);\n        // 生成新实例，防止新老指向同一个实例问题\n        return objectAssign(new PageInfo(), pageInfo, newPageInfo);\n      }\n    });\n  } else {\n    return _promise;\n  }\n}\n\nexport const simpleModel = {\n  namespace: $$.randomStr(4),\n  enhance: true,\n  state: {},\n  effects: {},\n  reducers: {}\n};\n\nexport default model => {\n  const { namespace, state, subscriptions, effects, reducers, enhance } = {\n    ...simpleModel,\n    ...model\n  };\n\n  if (!enhance) {\n    return { namespace, state, subscriptions, effects, reducers };\n  }\n  return {\n    namespace,\n    state,\n    subscriptions,\n    effects: {\n      // get old effect\n      ...effects,\n      /**\n       * payload 如果传入数组形式的payload，会合并结果后调用一次渲染\n       * success 在dispatch结束后得到成功的回调\n       * error 在dispatch结束后得到失败的回调\n       * afterResponse 模拟reduce中的操作，可以让我们有机会处理反回的数据，不能有副作用的方法\n       */\n      *[REQUEST]({ payload, success, error, afterResponse }, { call, put }) {\n        let _payloads = [];\n        if ($$.isObject(payload)) {\n          _payloads.push(payload);\n        } else if ($$.isArray(payload)) {\n          _payloads = payload;\n        }\n\n        const resultState = {\n          success: {},\n          error: {}\n        };\n\n        for (let i = 0; i < _payloads.length; i++) {\n          /**\n           * valueField: 返回结果将使用valueField字段的值来接收\n           * notice: 弹出通知\n           * actionType: 如果存在actionType, 则表示自已处理reducer,值为 actionType + ('_SUCCESS' | '_ERROR')\n           */\n          const { valueField, notice, actionType, ...otherPayload } = _payloads[i];\n\n          try {\n            let response = yield call(asyncRequest, otherPayload);\n\n            // 自已处理反回的数据，模拟reduce中的操作，这里不要写有副作用的函数\n            if ($$.isFunction(afterResponse)) {\n              let _r = afterResponse(response);\n              if (_r) response = _r;\n            }\n\n            // 如果需要回调\n            if (otherPayload.success) {\n              otherPayload.success(response);\n            }\n\n            // 如果需要通知功能\n            if (notice) {\n              config.notice.success(notice === true ? '操作成功' : notice[0]);\n            }\n\n            // 如果存在actionType,则表示自已处理reducer\n            if (actionType) {\n              yield put({\n                type: `${actionType}_SUCCESS`,\n                payload: response\n              });\n            } else {\n              // 准备返回值\n              resultState.success[valueField || '_@fake_'] = response;\n            }\n          } catch (e) {\n            resultState.error['error'] = e;\n\n            // 如果需要内部回调\n            if ($$.isFunction(otherPayload.error)) {\n              otherPayload.error(e);\n            } else if ($$.isFunction(error)) {\n              error(e);\n            }\n\n            // 通知reducer 如果存在actionType,则表示自已处理reducer\n            yield put({\n              type: actionType ? `${actionType}_ERROR` : REQUEST_ERROR,\n              payload: resultState.error\n            });\n            // 如果出错提前终止\n            break;\n          }\n        }\n\n        // 通知reducer\n        if (Object.keys(resultState.success).length) {\n          // 如果需要回调\n          if ($$.isFunction(success)) {\n            success(resultState.success);\n          }\n\n          yield put({\n            type: REQUEST_SUCCESS,\n            payload: resultState.success\n          });\n        }\n      },\n\n      *[CHANGE_STATE]({ payload, success }, { put }) {\n        yield put({\n          type: CHANGE_STATE_SUCCESS,\n          payload\n        });\n\n        if ($$.isFunction(success)) {\n          success();\n        }\n      }\n    },\n\n    reducers: {\n      // get old reducers\n      ...reducers,\n      // append new request reducers\n      [REQUEST_SUCCESS]: _changeState,\n      [REQUEST_ERROR]: _changeState,\n      [CHANGE_STATE_SUCCESS]: _changeState\n    }\n  };\n};\n\nconst _changeState = (state, { payload }) => ({\n  ...state,\n  ...payload\n});\n"]},"metadata":{},"sourceType":"module"}