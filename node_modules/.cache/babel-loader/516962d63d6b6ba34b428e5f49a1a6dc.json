{"ast":null,"code":"import _objectSpread from \"/Users/evan/progressMan/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _defineProperty from \"/Users/evan/progressMan/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/evan/progressMan/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/evan/progressMan/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/evan/progressMan/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/evan/progressMan/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/evan/progressMan/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _objectWithoutProperties from \"/Users/evan/progressMan/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport \"antd/lib/form/style\";\nimport _Form from \"antd/lib/form\";\nvar _jsxFileName = \"/Users/evan/progressMan/src/components/DataTable/Editable.js\";\nimport React from 'react';\nimport omit from 'object.omit';\nimport DataTable, { Oper } from './DataTable';\nvar EditableContext = React.createContext();\n\nvar Editable = _Form.create()(function (_ref) {\n  var form = _ref.form,\n      props = _objectWithoutProperties(_ref, [\"form\"]);\n\n  return React.createElement(EditableContext.Provider, {\n    value: form,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }, React.createElement(DataTable, Object.assign({}, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  })));\n});\n/**\n * 重新包装的Oper为了传递form到子组件\n * 例如\n *  <EditableOper>\n      {\n        form => <a onClick={e => onSave(form)}>保存</a>\n      }\n    </EditableOper>\n */\n\n\nvar EditableOper = function EditableOper(props) {\n  return React.createElement(EditableContext.Consumer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, function (form) {\n    return React.createElement(Oper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, props.children(form));\n  });\n};\n/**\n * 可编辑元件\n * 通过返回一个组件来改变当前表格Cell的展现方式\n * @param text 当前cell里的文本内容\n * @param record [Object] 包含当前cell的一行数据\n * @param field [Object] columns里的这一列\n * @param field.tableItem.editing [Function] 使用函数可以支持满足条件的指定单元格应用类型\n */\n\n\nvar EditableCell =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(EditableCell, _React$Component);\n\n  function EditableCell() {\n    _classCallCheck(this, EditableCell);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(EditableCell).apply(this, arguments));\n  }\n\n  _createClass(EditableCell, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // 重置表单项，否则会带入值到下一行\n      var _this$props = this.props,\n          record = _this$props.record,\n          field = _this$props.field;\n\n      if (record && record[field.name]) {\n        this.form.setFieldsValue(_defineProperty({}, field.name, record[field.name]));\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var _this$props2 = this.props,\n          record = _this$props2.record,\n          text = _this$props2.text,\n          field = _this$props2.field;\n      var tableItem = field.tableItem;\n      var type = tableItem.type;\n      return React.createElement(EditableContext.Consumer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, function (form) {\n        if (!form) {\n          console.warn('Please use Editable instead of DataTable');\n          return text;\n        }\n\n        if (!_this.form) _this.form = form;\n\n        var formProps = _objectSpread({\n          form: form,\n          name: field.name,\n          title: field.title,\n          record: record\n        }, tableItem);\n\n        if (field.dict) {\n          formProps.dict = field.dict;\n        }\n\n        formProps = omit(formProps, ['editing', 'render']);\n        return React.createElement(_Form.Item, {\n          help: false,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73\n          },\n          __self: this\n        }, require(\"../Form/model/\".concat(type.toLowerCase())).default(formProps));\n      });\n    }\n  }]);\n\n  return EditableCell;\n}(React.Component);\n\nexport { Editable, EditableCell, EditableOper };","map":{"version":3,"sources":["/Users/evan/progressMan/src/components/DataTable/Editable.js"],"names":["React","omit","DataTable","Oper","EditableContext","createContext","Editable","create","form","props","EditableOper","children","EditableCell","record","field","name","setFieldsValue","text","tableItem","type","console","warn","formProps","title","dict","require","toLowerCase","default","Component"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAOC,SAAP,IAAoBC,IAApB,QAAgC,aAAhC;AAEA,IAAMC,eAAe,GAAGJ,KAAK,CAACK,aAAN,EAAxB;;AAEA,IAAMC,QAAQ,GAAG,MAAKC,MAAL,GAAc;AAAA,MAAGC,IAAH,QAAGA,IAAH;AAAA,MAAYC,KAAZ;;AAAA,SAC7B,oBAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAED,IAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,SAAD,oBAAeC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,CAD6B;AAAA,CAAd,CAAjB;AAMA;;;;;;;;;;;AASA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAAAD,KAAK;AAAA,SACxB,oBAAC,eAAD,CAAiB,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,UAAAD,IAAI;AAAA,WAAI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAOC,KAAK,CAACE,QAAN,CAAeH,IAAf,CAAP,CAAJ;AAAA,GADP,CADwB;AAAA,CAA1B;AAMA;;;;;;;;;;IAQMI,Y;;;;;;;;;;;;;wCACgB;AAClB;AADkB,wBAEQ,KAAKH,KAFb;AAAA,UAEVI,MAFU,eAEVA,MAFU;AAAA,UAEFC,KAFE,eAEFA,KAFE;;AAGlB,UAAID,MAAM,IAAIA,MAAM,CAACC,KAAK,CAACC,IAAP,CAApB,EAAkC;AAChC,aAAKP,IAAL,CAAUQ,cAAV,qBACGF,KAAK,CAACC,IADT,EACgBF,MAAM,CAACC,KAAK,CAACC,IAAP,CADtB;AAGD;AACF;;;6BAEQ;AAAA;;AAAA,yBACyB,KAAKN,KAD9B;AAAA,UACCI,MADD,gBACCA,MADD;AAAA,UACSI,IADT,gBACSA,IADT;AAAA,UACeH,KADf,gBACeA,KADf;AAAA,UAECI,SAFD,GAEeJ,KAFf,CAECI,SAFD;AAAA,UAGCC,IAHD,GAGUD,SAHV,CAGCC,IAHD;AAKP,aACE,oBAAC,eAAD,CAAiB,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,UAAAX,IAAI,EAAI;AACP,YAAI,CAACA,IAAL,EAAW;AACTY,UAAAA,OAAO,CAACC,IAAR,CAAa,0CAAb;AACA,iBAAOJ,IAAP;AACD;;AACD,YAAI,CAAC,KAAI,CAACT,IAAV,EAAgB,KAAI,CAACA,IAAL,GAAYA,IAAZ;;AAChB,YAAIc,SAAS;AACXd,UAAAA,IAAI,EAAJA,IADW;AAEXO,UAAAA,IAAI,EAAED,KAAK,CAACC,IAFD;AAGXQ,UAAAA,KAAK,EAAET,KAAK,CAACS,KAHF;AAIXV,UAAAA,MAAM,EAANA;AAJW,WAKRK,SALQ,CAAb;;AAOA,YAAIJ,KAAK,CAACU,IAAV,EAAgB;AACdF,UAAAA,SAAS,CAACE,IAAV,GAAiBV,KAAK,CAACU,IAAvB;AACD;;AACDF,QAAAA,SAAS,GAAGrB,IAAI,CAACqB,SAAD,EAAY,CAAC,SAAD,EAAY,QAAZ,CAAZ,CAAhB;AACA,eACE,0BAAM,IAAN;AAAW,UAAA,IAAI,EAAE,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACGG,OAAO,yBAAkBN,IAAI,CAACO,WAAL,EAAlB,EAAP,CAA+CC,OAA/C,CACCL,SADD,CADH,CADF;AAOD,OAzBH,CADF;AA6BD;;;;EA7CwBtB,KAAK,CAAC4B,S;;AAgDjC,SAAStB,QAAT,EAAmBM,YAAnB,EAAiCF,YAAjC","sourcesContent":["import React from 'react';\nimport { Form } from 'antd';\nimport omit from 'object.omit';\nimport DataTable, { Oper } from './DataTable';\n\nconst EditableContext = React.createContext();\n\nconst Editable = Form.create()(({ form, ...props }) => (\n  <EditableContext.Provider value={form}>\n    <DataTable {...props} />\n  </EditableContext.Provider>\n));\n\n/**\n * 重新包装的Oper为了传递form到子组件\n * 例如\n *  <EditableOper>\n      {\n        form => <a onClick={e => onSave(form)}>保存</a>\n      }\n    </EditableOper>\n */\nconst EditableOper = props => (\n  <EditableContext.Consumer>\n    {form => <Oper>{props.children(form)}</Oper>}\n  </EditableContext.Consumer>\n);\n\n/**\n * 可编辑元件\n * 通过返回一个组件来改变当前表格Cell的展现方式\n * @param text 当前cell里的文本内容\n * @param record [Object] 包含当前cell的一行数据\n * @param field [Object] columns里的这一列\n * @param field.tableItem.editing [Function] 使用函数可以支持满足条件的指定单元格应用类型\n */\nclass EditableCell extends React.Component {\n  componentDidMount() {\n    // 重置表单项，否则会带入值到下一行\n    const { record, field } = this.props;\n    if (record && record[field.name]) {\n      this.form.setFieldsValue({\n        [field.name]: record[field.name]\n      });\n    }\n  }\n\n  render() {\n    const { record, text, field } = this.props;\n    const { tableItem } = field;\n    const { type } = tableItem;\n\n    return (\n      <EditableContext.Consumer>\n        {form => {\n          if (!form) {\n            console.warn('Please use Editable instead of DataTable');\n            return text;\n          }\n          if (!this.form) this.form = form;\n          let formProps = {\n            form,\n            name: field.name,\n            title: field.title,\n            record,\n            ...tableItem\n          };\n          if (field.dict) {\n            formProps.dict = field.dict;\n          }\n          formProps = omit(formProps, ['editing', 'render']);\n          return (\n            <Form.Item help={false}>\n              {require(`../Form/model/${type.toLowerCase()}`).default(\n                formProps\n              )}\n            </Form.Item>\n          );\n        }}\n      </EditableContext.Consumer>\n    );\n  }\n}\n\nexport { Editable, EditableCell, EditableOper };\n"]},"metadata":{},"sourceType":"module"}