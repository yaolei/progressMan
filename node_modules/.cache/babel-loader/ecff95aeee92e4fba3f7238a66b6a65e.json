{"ast":null,"code":"var _jsxFileName = \"/Users/evan/progressMan/src/config.js\";\nimport React from 'react';\nimport PageLoading from 'components/Loading/PageLoading';\nimport { normal } from 'components/Notification';\nimport store from 'cmn-utils/lib/store'; // 系统通知, 定义使用什么风格的通知，normal或antdNotice\n\nvar notice = normal;\n/**\n * 应用配置 如请求格式，反回格式，异常处理方式，分页格式等\n */\n\nexport default {\n  /**\n   * HTML的title模板\n   */\n  htmlTitle: 'DBAdmin - {title}',\n\n  /**\n   * 系统通知\n   */\n  notice: notice,\n  // 异步请求配置\n  request: {\n    prefix: '/api',\n    // 每次请求头部都会带着这些参数\n    withHeaders: function withHeaders() {\n      return {\n        token: store.getStore(\"token\")\n      };\n    },\n\n    /**\n     * 因为modelEnhance需要知道服务器反回的数据，\n     * 什么样的是成功，什么样的是失败，如\n     * {status: true, data: ...} // 代表成功\n     * {status: false, message: ...} // 代表失败\n     * 实际中应该通过服务端反回的response中的\n     * 成功失败标识来进行区分\n     */\n    afterResponse: function afterResponse(response) {\n      var status = response.status,\n          message = response.message;\n\n      if (status) {\n        return response;\n      } else {\n        throw new Error(message);\n      }\n    },\n    errorHandle: function errorHandle(err) {\n      // 请求错误全局拦截\n      if (err.name === 'RequestError') {\n        notice.error(err.text || err.message);\n      }\n    }\n  },\n  // 全局异常\n  exception: {\n    global: function global(err, dispatch) {\n      var errName = err.name; // RequestError为拦截请求异常\n\n      if (errName === 'RequestError') {\n        notice.error(err.message);\n        console.error(err);\n      } else {\n        console.error(err);\n      }\n    }\n  },\n  // 分页助手\n  pageHelper: {\n    // 格式化要发送到后端的数据\n    requestFormat: function requestFormat(pageInfo) {\n      var pageNum = pageInfo.pageNum,\n          pageSize = pageInfo.pageSize,\n          filters = pageInfo.filters,\n          sorts = pageInfo.sorts;\n      return {\n        currentPage: pageNum,\n        showCount: pageSize,\n        sortMap: sorts,\n        paramMap: filters\n      };\n    },\n    // 格式化从后端反回的数据\n    responseFormat: function responseFormat(resp) {\n      var _resp$data = resp.data,\n          currentPage = _resp$data.currentPage,\n          showCount = _resp$data.showCount,\n          totalResult = _resp$data.totalResult,\n          dataList = _resp$data.dataList,\n          totalPage = _resp$data.totalPage;\n      return {\n        pageNum: currentPage,\n        pageSize: showCount,\n        total: totalResult,\n        totalPages: totalPage,\n        list: dataList\n      };\n    }\n  },\n  // 路由加载效果\n  router: {\n    loading: React.createElement(PageLoading, {\n      loading: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    })\n  },\n\n  /**\n   * 模拟数据时包装反回数据\n   * 因为，后端反回数据时一般都会在外边包装一层状态信息\n   * 如成功时：\n   * {\n   *   status: true,\n   *   data: responseData\n   * }\n   * 或出错时：\n   * {\n   *   status: false,\n   *   code: 500,\n   *   message: '用户名或密码错误'\n   * }\n   * 这里就是配置这两个函数，为了我们模拟数据时可以少写几行代码的 orz...\n   */\n  mock: {\n    toSuccess: function toSuccess(response) {\n      return {\n        status: true,\n        data: response\n      };\n    },\n    toError: function toError(message) {\n      return {\n        status: false,\n        message: message\n      };\n    }\n  }\n};","map":{"version":3,"sources":["/Users/evan/progressMan/src/config.js"],"names":["React","PageLoading","normal","store","notice","htmlTitle","request","prefix","withHeaders","token","getStore","afterResponse","response","status","message","Error","errorHandle","err","name","error","text","exception","global","dispatch","errName","console","pageHelper","requestFormat","pageInfo","pageNum","pageSize","filters","sorts","currentPage","showCount","sortMap","paramMap","responseFormat","resp","data","totalResult","dataList","totalPage","total","totalPages","list","router","loading","mock","toSuccess","toError"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PageLoading from 'components/Loading/PageLoading';\nimport { normal } from 'components/Notification';\nimport store from 'cmn-utils/lib/store';\n\n// 系统通知, 定义使用什么风格的通知，normal或antdNotice\nconst notice = normal;\n\n/**\n * 应用配置 如请求格式，反回格式，异常处理方式，分页格式等\n */\nexport default {\n  /**\n   * HTML的title模板\n   */\n  htmlTitle: 'DBAdmin - {title}',\n  \n  /**\n   * 系统通知\n   */\n  notice,\n\n  // 异步请求配置\n  request: {\n    prefix: '/api',\n\n    // 每次请求头部都会带着这些参数\n    withHeaders: () => ({\n      token: store.getStore(\"token\"),\n    }),\n\n    /**\n     * 因为modelEnhance需要知道服务器反回的数据，\n     * 什么样的是成功，什么样的是失败，如\n     * {status: true, data: ...} // 代表成功\n     * {status: false, message: ...} // 代表失败\n     * 实际中应该通过服务端反回的response中的\n     * 成功失败标识来进行区分\n     */\n    afterResponse: response => {\n      const { status, message } = response;\n      if (status) {\n        return response;\n      } else {\n        throw new Error(message);\n      }\n    },\n    errorHandle: err => {\n      // 请求错误全局拦截\n      if (err.name === 'RequestError') {\n        notice.error(err.text || err.message);\n      }\n    }\n  },\n\n  // 全局异常\n  exception: {\n    global: (err, dispatch) => {\n      const errName = err.name;\n      // RequestError为拦截请求异常\n      if (errName === 'RequestError') {\n        notice.error(err.message);\n        console.error(err); \n      } else {\n        console.error(err);\n      }\n    },\n  },\n\n  // 分页助手\n  pageHelper: {\n    // 格式化要发送到后端的数据\n    requestFormat: pageInfo => {\n      const { pageNum, pageSize, filters, sorts } = pageInfo;\n      return {\n        currentPage: pageNum,\n        showCount: pageSize,\n        sortMap: sorts,\n        paramMap: filters\n      };\n    },\n\n    // 格式化从后端反回的数据\n    responseFormat: resp => {\n      const {\n        currentPage,\n        showCount,\n        totalResult,\n        dataList,\n        totalPage\n      } = resp.data;\n      return {\n        pageNum: currentPage,\n        pageSize: showCount,\n        total: totalResult,\n        totalPages: totalPage,\n        list: dataList\n      };\n    }\n  },\n\n  // 路由加载效果\n  router: {\n    loading: <PageLoading loading />\n  },\n\n  /**\n   * 模拟数据时包装反回数据\n   * 因为，后端反回数据时一般都会在外边包装一层状态信息\n   * 如成功时：\n   * {\n   *   status: true,\n   *   data: responseData\n   * }\n   * 或出错时：\n   * {\n   *   status: false,\n   *   code: 500,\n   *   message: '用户名或密码错误'\n   * }\n   * 这里就是配置这两个函数，为了我们模拟数据时可以少写几行代码的 orz...\n   */\n  mock: {\n    toSuccess: response => ({\n      status: true,\n      data: response\n    }),\n\n    toError: message => ({\n      status: false,\n      message: message\n    })\n  }\n};\n"]},"metadata":{},"sourceType":"module"}