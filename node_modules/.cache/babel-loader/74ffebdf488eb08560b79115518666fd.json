{"ast":null,"code":"/*! store2 - v2.7.1 - 2018-11-15\n* Copyright (c) 2018 Nathan Bubna; Licensed (MIT OR GPL-3.0) */\n;\n\n(function (window, define) {\n  var _ = {\n    version: \"2.7.1\",\n    areas: {},\n    apis: {},\n    // utilities\n    inherit: function inherit(api, o) {\n      for (var p in api) {\n        if (!o.hasOwnProperty(p)) {\n          o[p] = api[p];\n        }\n      }\n\n      return o;\n    },\n    stringify: function stringify(d) {\n      return d === undefined || typeof d === \"function\" ? d + '' : JSON.stringify(d);\n    },\n    parse: function parse(s) {\n      // if it doesn't parse, return as is\n      try {\n        return JSON.parse(s);\n      } catch (e) {\n        return s;\n      }\n    },\n    // extension hooks\n    fn: function fn(name, _fn) {\n      _.storeAPI[name] = _fn;\n\n      for (var api in _.apis) {\n        _.apis[api][name] = _fn;\n      }\n    },\n    get: function get(area, key) {\n      return area.getItem(key);\n    },\n    set: function set(area, key, string) {\n      area.setItem(key, string);\n    },\n    remove: function remove(area, key) {\n      area.removeItem(key);\n    },\n    key: function key(area, i) {\n      return area.key(i);\n    },\n    length: function length(area) {\n      return area.length;\n    },\n    clear: function clear(area) {\n      area.clear();\n    },\n    // core functions\n    Store: function Store(id, area, namespace) {\n      var store = _.inherit(_.storeAPI, function (key, data, overwrite) {\n        if (arguments.length === 0) {\n          return store.getAll();\n        }\n\n        if (typeof data === \"function\") {\n          return store.transact(key, data, overwrite);\n        } // fn=data, alt=overwrite\n\n\n        if (data !== undefined) {\n          return store.set(key, data, overwrite);\n        }\n\n        if (typeof key === \"string\" || typeof key === \"number\") {\n          return store.get(key);\n        }\n\n        if (!key) {\n          return store.clear();\n        }\n\n        return store.setAll(key, data); // overwrite=data, data=key\n      });\n\n      store._id = id;\n\n      try {\n        var testKey = '_-bad-_';\n        area.setItem(testKey, 'wolf');\n        store._area = area;\n        area.removeItem(testKey);\n      } catch (e) {}\n\n      if (!store._area) {\n        store._area = _.inherit(_.storageAPI, {\n          items: {},\n          name: 'fake'\n        });\n      }\n\n      store._ns = namespace || '';\n\n      if (!_.areas[id]) {\n        _.areas[id] = store._area;\n      }\n\n      if (!_.apis[store._ns + store._id]) {\n        _.apis[store._ns + store._id] = store;\n      }\n\n      return store;\n    },\n    storeAPI: {\n      // admin functions\n      area: function area(id, _area) {\n        var store = this[id];\n\n        if (!store || !store.area) {\n          store = _.Store(id, _area, this._ns); //new area-specific api in this namespace\n\n          if (!this[id]) {\n            this[id] = store;\n          }\n        }\n\n        return store;\n      },\n      namespace: function namespace(_namespace, noSession) {\n        if (!_namespace) {\n          return this._ns ? this._ns.substring(0, this._ns.length - 1) : '';\n        }\n\n        var ns = _namespace,\n            store = this[ns];\n\n        if (!store || !store.namespace) {\n          store = _.Store(this._id, this._area, this._ns + ns + '.'); //new namespaced api\n\n          if (!this[ns]) {\n            this[ns] = store;\n          }\n\n          if (!noSession) {\n            store.area('session', _.areas.session);\n          }\n        }\n\n        return store;\n      },\n      isFake: function isFake() {\n        return this._area.name === 'fake';\n      },\n      toString: function toString() {\n        return 'store' + (this._ns ? '.' + this.namespace() : '') + '[' + this._id + ']';\n      },\n      // storage functions\n      has: function has(key) {\n        if (this._area.has) {\n          return this._area.has(this._in(key)); //extension hook\n        }\n\n        return !!(this._in(key) in this._area);\n      },\n      size: function size() {\n        return this.keys().length;\n      },\n      each: function each(fn, value) {\n        // value is used by keys(fillList) and getAll(fillList))\n        for (var i = 0, m = _.length(this._area); i < m; i++) {\n          var key = this._out(_.key(this._area, i));\n\n          if (key !== undefined) {\n            if (fn.call(this, key, value || this.get(key)) === false) {\n              break;\n            }\n          }\n\n          if (m > _.length(this._area)) {\n            m--;\n            i--;\n          } // in case of removeItem\n\n        }\n\n        return value || this;\n      },\n      keys: function keys(fillList) {\n        return this.each(function (k, list) {\n          list.push(k);\n        }, fillList || []);\n      },\n      get: function get(key, alt) {\n        var s = _.get(this._area, this._in(key));\n\n        return s !== null ? _.parse(s) : alt || s; // support alt for easy default mgmt\n      },\n      getAll: function getAll(fillObj) {\n        return this.each(function (k, all) {\n          all[k] = this.get(k);\n        }, fillObj || {});\n      },\n      transact: function transact(key, fn, alt) {\n        var val = this.get(key, alt),\n            ret = fn(val);\n        this.set(key, ret === undefined ? val : ret);\n        return this;\n      },\n      set: function set(key, data, overwrite) {\n        var d = this.get(key);\n\n        if (d != null && overwrite === false) {\n          return data;\n        }\n\n        return _.set(this._area, this._in(key), _.stringify(data), overwrite) || d;\n      },\n      setAll: function setAll(data, overwrite) {\n        var changed, val;\n\n        for (var key in data) {\n          val = data[key];\n\n          if (this.set(key, val, overwrite) !== val) {\n            changed = true;\n          }\n        }\n\n        return changed;\n      },\n      add: function add(key, data) {\n        var d = this.get(key);\n\n        if (d instanceof Array) {\n          data = d.concat(data);\n        } else if (d !== null) {\n          var type = typeof d;\n\n          if (type === typeof data && type === 'object') {\n            for (var k in data) {\n              d[k] = data[k];\n            }\n\n            data = d;\n          } else {\n            data = d + data;\n          }\n        }\n\n        _.set(this._area, this._in(key), _.stringify(data));\n\n        return data;\n      },\n      remove: function remove(key) {\n        var d = this.get(key);\n\n        _.remove(this._area, this._in(key));\n\n        return d;\n      },\n      clear: function clear() {\n        if (!this._ns) {\n          _.clear(this._area);\n        } else {\n          this.each(function (k) {\n            _.remove(this._area, this._in(k));\n          }, 1);\n        }\n\n        return this;\n      },\n      clearAll: function clearAll() {\n        var area = this._area;\n\n        for (var id in _.areas) {\n          if (_.areas.hasOwnProperty(id)) {\n            this._area = _.areas[id];\n            this.clear();\n          }\n        }\n\n        this._area = area;\n        return this;\n      },\n      // internal use functions\n      _in: function _in(k) {\n        if (typeof k !== \"string\") {\n          k = _.stringify(k);\n        }\n\n        return this._ns ? this._ns + k : k;\n      },\n      _out: function _out(k) {\n        return this._ns ? k && k.indexOf(this._ns) === 0 ? k.substring(this._ns.length) : undefined : // so each() knows to skip it\n        k;\n      }\n    },\n    // end _.storeAPI\n    storageAPI: {\n      length: 0,\n      has: function has(k) {\n        return this.items.hasOwnProperty(k);\n      },\n      key: function key(i) {\n        var c = 0;\n\n        for (var k in this.items) {\n          if (this.has(k) && i === c++) {\n            return k;\n          }\n        }\n      },\n      setItem: function setItem(k, v) {\n        if (!this.has(k)) {\n          this.length++;\n        }\n\n        this.items[k] = v;\n      },\n      removeItem: function removeItem(k) {\n        if (this.has(k)) {\n          delete this.items[k];\n          this.length--;\n        }\n      },\n      getItem: function getItem(k) {\n        return this.has(k) ? this.items[k] : null;\n      },\n      clear: function clear() {\n        for (var k in this.items) {\n          this.removeItem(k);\n        }\n      },\n      toString: function toString() {\n        return this.length + ' items in ' + this.name + 'Storage';\n      } // end _.storageAPI\n\n    }\n  };\n\n  var store = // safely set this up (throws error in IE10/32bit mode for local files)\n  _.Store(\"local\", function () {\n    try {\n      return localStorage;\n    } catch (e) {}\n  }());\n\n  store.local = store; // for completeness\n\n  store._ = _; // for extenders and debuggers...\n  // safely setup store.session (throws exception in FF for file:/// urls)\n\n  store.area(\"session\", function () {\n    try {\n      return sessionStorage;\n    } catch (e) {}\n  }());\n\n  if (typeof define === 'function' && define.amd !== undefined) {\n    define('store2', [], function () {\n      return store;\n    });\n  } else if (typeof module !== 'undefined' && module.exports) {\n    module.exports = store;\n  } else {\n    // expose the primary store fn to the global object and save conflicts\n    if (window.store) {\n      _.conflict = window.store;\n    }\n\n    window.store = store;\n  }\n})(this, this && this.define);","map":null,"metadata":{},"sourceType":"script"}