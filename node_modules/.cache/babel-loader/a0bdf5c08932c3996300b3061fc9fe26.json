{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _store = require('store2');\n\nvar _store2 = _interopRequireDefault(_store);\n\nvar _utils = require('../utils');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nvar Store = function Store(namespace) {\n  (0, _classCallCheck3['default'])(this, Store);\n\n  _initialiseProps.call(this);\n\n  this.store = namespace ? _store2['default'].namespace(namespace) : _store2['default'];\n  this.session = this.store.session;\n  this.local = this.store.local;\n}\n/**\r\n * 反回一个新的store\r\n */\n\n/**\r\n * 将 value 存储在本地缓存中指定的 key 中，会覆盖掉原来该 key 对应的内容\r\n * Examples:\r\n *\r\n *   .setStore('name', 'abc')\r\n *   .setStore({ name: 'abc', age: 18 }) // 一次存多个\r\n * @param {string | object} key \r\n * @param {any} value \r\n */\n\n/**\r\n * 从本地缓存中异步获取指定 key 对应的内容, 如指定alt当没找到时反回alt\r\n * @param {string} key \r\n * @return {Promise}\r\n */\n\n/**\r\n * 从本地缓存中同步获取指定 key 对应的内容, 如指定alt当没找到时反回alt\r\n * @param {string} key \r\n * @param {any} alt\r\n */\n\n/**\r\n * 获取当前Store的所有key-value信息,放入一个对象中\r\n */\n\n/**\r\n * 获取当前Store的所有key-value信息,放入一个回调函数里,这样可以接着链式操作\r\n * .getStoreInfoAsync(v => v).setStore({})\r\n */\n\n/**\r\n * 从本地缓存中移除指定 key \r\n * @param {string} key \r\n */\n\n/**\r\n * 清理本地数据缓存\r\n */\n\n/**\r\n * 直接使用 store2\r\n */\n;\n\nvar _initialiseProps = function _initialiseProps() {\n  var _this = this;\n\n  this.create = function (namespace) {\n    return new Store(namespace);\n  };\n\n  this.setStore = function (key, value) {\n    if ((0, _utils.isObject)(key)) {\n      _this.store.setAll(key);\n    } else {\n      _this.store.set(key, value);\n    }\n\n    return _this;\n  };\n\n  this.getStoreAsync = function (key, alt) {\n    return Promise.resolve(_this.store.get(key, alt));\n  };\n\n  this.getStore = function (key, alt) {\n    return _this.store.get(key, alt);\n  };\n\n  this.getStoreInfo = function () {\n    return _this.store.getAll();\n  };\n\n  this.getStoreInfoAsync = function (cb) {\n    if ((0, _utils.isFunction)(cb)) cb(_this.store.getAll());\n    return _this;\n  };\n\n  this.removeStore = function (key) {\n    _this.store.remove(key);\n\n    return _this;\n  };\n\n  this.clearStore = function () {\n    _this.store.clearAll();\n\n    return _this;\n  };\n\n  this.native = function () {\n    return _store2['default'];\n  };\n};\n\nexports['default'] = Store;\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}