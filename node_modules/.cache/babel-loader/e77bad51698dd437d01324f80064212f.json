{"ast":null,"code":"import _objectSpread from \"/Users/evan/progressMan/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport \"antd/lib/modal/style\";\nimport _Modal from \"antd/lib/modal\";\nimport _objectWithoutProperties from \"/Users/evan/progressMan/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"/Users/evan/progressMan/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/evan/progressMan/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/evan/progressMan/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/evan/progressMan/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/evan/progressMan/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport \"antd/lib/select/style\";\nimport _Select from \"antd/lib/select\";\nvar _jsxFileName = \"/Users/evan/progressMan/src/components/Form/model/transfertree.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport TransferTree from '../../TransferTree';\nimport $$ from 'cmn-utils';\nvar Option = _Select.Option;\n/**\n *  formItem: {\n      type: 'transfer',\n      modal: true,\n      dataSource: employees,\n      normalize: (value) => value.map(item => item.key)\n    }\n */\n\nvar TransferTreeControlled =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(TransferTreeControlled, _Component);\n\n  function TransferTreeControlled(props) {\n    var _this;\n\n    _classCallCheck(this, TransferTreeControlled);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TransferTreeControlled).call(this, props));\n\n    _this.triggerChange = function (targetKeys, targetNodes) {\n      var _this$props = _this.props,\n          modal = _this$props.modal,\n          onChange = _this$props.onChange;\n\n      _this.setState({\n        value: targetNodes\n      });\n\n      if (onChange && !modal) {\n        onChange(targetNodes);\n      }\n    };\n\n    _this.showModal = function () {\n      _this.setState({\n        visible: true\n      });\n    };\n\n    _this.hideModal = function () {\n      _this.setState({\n        visible: false\n      });\n    };\n\n    _this.onSelectChange = function (value, option) {\n      var onChange = _this.props.onChange;\n\n      _this.setState({\n        value: value\n      });\n\n      onChange && onChange(value);\n    };\n\n    var _value = props.value,\n        dataSource = props.dataSource;\n    _this.state = {\n      value: _value,\n      dataSource: dataSource,\n      visible: false\n    };\n    return _this;\n  }\n\n  _createClass(TransferTreeControlled, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      if (this.props.value !== nextProps.value) {\n        this.setState({\n          value: nextProps.value\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          modal = _this$props2.modal,\n          placeholder = _this$props2.placeholder,\n          otherProps = _objectWithoutProperties(_this$props2, [\"modal\", \"placeholder\"]);\n\n      var _this$state = this.state,\n          dataSource = _this$state.dataSource,\n          value = _this$state.value;\n      var comp = React.createElement(TransferTree, Object.assign({}, otherProps, {\n        dataSource: dataSource,\n        targetNodes: value,\n        onChange: this.triggerChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }));\n\n      if (modal || otherProps.disabled) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 82\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          onClick: otherProps.disabled ? function () {} : this.showModal,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83\n          },\n          __self: this\n        }, React.createElement(_Select, {\n          readOnly: true,\n          disabled: !!otherProps.disabled,\n          mode: \"multiple\",\n          open: false,\n          value: otherProps.value,\n          onChange: this.onSelectChange,\n          placeholder: placeholder,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84\n          },\n          __self: this\n        }, otherProps.value && dataSource.filter(function (item) {\n          return otherProps.value.indexOf(item.key) !== -1;\n        }).map(function (item) {\n          return React.createElement(Option, {\n            key: item.key,\n            value: item.key,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 97\n            },\n            __self: this\n          }, item.title || item.label);\n        }))), React.createElement(_Modal, Object.assign({\n          className: \"antui-transfer-modal\",\n          title: '请选择' + otherProps.title,\n          visible: this.state && this.state.visible,\n          width: modal.width || 480,\n          onOk: this.hideModal,\n          onCancel: this.hideModal,\n          okText: \"\\u786E\\u5B9A\",\n          cancelText: \"\\u53D6\\u6D88\"\n        }, modal, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103\n          },\n          __self: this\n        }), comp));\n      }\n\n      return comp;\n    }\n  }]);\n\n  return TransferTreeControlled;\n}(Component);\n/**\n * TransferTreeForm组件\n */\n\n\nTransferTreeControlled.propTypes = {\n  value: PropTypes.array,\n  dataSource: PropTypes.array,\n  onChange: PropTypes.func\n};\nexport default (function (_ref) {\n  var form = _ref.form,\n      name = _ref.name,\n      _ref$formFieldOptions = _ref.formFieldOptions,\n      formFieldOptions = _ref$formFieldOptions === void 0 ? {} : _ref$formFieldOptions,\n      record = _ref.record,\n      initialValue = _ref.initialValue,\n      rules = _ref.rules,\n      onChange = _ref.onChange,\n      dataSource = _ref.dataSource,\n      normalize = _ref.normalize,\n      placeholder = _ref.placeholder,\n      getPopupContainer = _ref.getPopupContainer,\n      otherProps = _objectWithoutProperties(_ref, [\"form\", \"name\", \"formFieldOptions\", \"record\", \"initialValue\", \"rules\", \"onChange\", \"dataSource\", \"normalize\", \"placeholder\", \"getPopupContainer\"]);\n\n  var getFieldDecorator = form.getFieldDecorator;\n  var initval = initialValue;\n\n  if (record) {\n    initval = record[name];\n  } // 如果存在初始值\n\n\n  if (initval !== null && typeof initval !== 'undefined') {\n    if ($$.isFunction(normalize)) {\n      formFieldOptions.initialValue = normalize(initval);\n    } else {\n      formFieldOptions.initialValue = initval;\n    }\n  } // 如果有rules\n\n\n  if (rules && rules.length) {\n    formFieldOptions.rules = rules;\n  } // 如果需要onChange\n\n\n  if (typeof onChange === 'function') {\n    formFieldOptions.onChange = function (value) {\n      return onChange(form, value);\n    }; // form, value\n\n  }\n\n  var props = _objectSpread({\n    placeholder: placeholder || \"\\u8BF7\\u9009\\u62E9\".concat(otherProps.title)\n  }, otherProps);\n\n  return getFieldDecorator(name, formFieldOptions)(React.createElement(TransferTreeControlled, Object.assign({\n    dataSource: dataSource\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  })));\n});","map":{"version":3,"sources":["/Users/evan/progressMan/src/components/Form/model/transfertree.js"],"names":["React","Component","PropTypes","TransferTree","$$","Option","TransferTreeControlled","props","triggerChange","targetKeys","targetNodes","modal","onChange","setState","value","showModal","visible","hideModal","onSelectChange","option","dataSource","state","nextProps","placeholder","otherProps","comp","disabled","filter","item","indexOf","key","map","title","label","width","propTypes","array","func","form","name","formFieldOptions","record","initialValue","rules","normalize","getPopupContainer","getFieldDecorator","initval","isFunction","length"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Modal, Select } from 'antd';\nimport TransferTree from '../../TransferTree';\nimport $$ from 'cmn-utils';\nconst Option = Select.Option;\n\n/**\n *  formItem: {\n      type: 'transfer',\n      modal: true,\n      dataSource: employees,\n      normalize: (value) => value.map(item => item.key)\n    }\n */\nclass TransferTreeControlled extends Component {\n  static propTypes = {\n    value: PropTypes.array,\n    dataSource: PropTypes.array,\n    onChange: PropTypes.func\n  };\n\n  constructor(props) {\n    super(props);\n    const { value, dataSource } = props;\n    this.state = {\n      value: value,\n      dataSource: dataSource,\n      visible: false\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (this.props.value !== nextProps.value) {\n      this.setState({ value: nextProps.value });\n    }\n  }\n\n  triggerChange = (targetKeys, targetNodes) => {\n    const { modal, onChange } = this.props;\n    this.setState({ value: targetNodes });\n\n    if (onChange && !modal) {\n      onChange(targetNodes);\n    }\n  };\n\n  showModal = () => {\n    this.setState({\n      visible: true\n    });\n  };\n\n  hideModal = () => {\n    this.setState({\n      visible: false\n    });\n  };\n\n  onSelectChange = (value, option) => {\n    const { onChange } = this.props;\n    this.setState({\n      value\n    });\n    onChange && onChange(value);\n  };\n\n  render() {\n    const { modal, placeholder, ...otherProps } = this.props;\n    const { dataSource, value } = this.state;\n    const comp = (\n      <TransferTree\n        {...otherProps}\n        dataSource={dataSource}\n        targetNodes={value}\n        onChange={this.triggerChange}\n      />\n    );\n\n    if (modal || otherProps.disabled) {\n      return (\n        <div>\n          <div onClick={otherProps.disabled ? () => {} : this.showModal}>\n            <Select\n              readOnly\n              disabled={!!otherProps.disabled}\n              mode=\"multiple\"\n              open={false}\n              value={otherProps.value}\n              onChange={this.onSelectChange}\n              placeholder={placeholder}\n            >\n              {otherProps.value &&\n                dataSource\n                  .filter(item => otherProps.value.indexOf(item.key) !== -1)\n                  .map(item => (\n                    <Option key={item.key} value={item.key}>\n                      {item.title || item.label}\n                    </Option>\n                  ))}\n            </Select>\n          </div>\n          <Modal\n            className=\"antui-transfer-modal\"\n            title={'请选择' + otherProps.title}\n            visible={this.state && this.state.visible}\n            width={modal.width || 480}\n            onOk={this.hideModal}\n            onCancel={this.hideModal}\n            okText=\"确定\"\n            cancelText=\"取消\"\n            {...modal}\n          >\n            {comp}\n          </Modal>\n        </div>\n      );\n    }\n\n    return comp;\n  }\n}\n\n/**\n * TransferTreeForm组件\n */\nexport default ({\n  form,\n  name,\n  formFieldOptions = {},\n  record,\n  initialValue,\n  rules,\n  onChange,\n  dataSource,\n  normalize,\n  placeholder,\n  getPopupContainer,\n  ...otherProps\n}) => {\n  const { getFieldDecorator } = form;\n\n  let initval = initialValue;\n\n  if (record) {\n    initval = record[name];\n  }\n\n  // 如果存在初始值\n  if (initval !== null && typeof initval !== 'undefined') {\n    if ($$.isFunction(normalize)) {\n      formFieldOptions.initialValue = normalize(initval);\n    } else {\n      formFieldOptions.initialValue = initval;\n    }\n  }\n\n  // 如果有rules\n  if (rules && rules.length) {\n    formFieldOptions.rules = rules;\n  }\n\n  // 如果需要onChange\n  if (typeof onChange === 'function') {\n    formFieldOptions.onChange = value => onChange(form, value); // form, value\n  }\n\n  const props = {\n    placeholder: placeholder || `请选择${otherProps.title}`,\n    ...otherProps\n  };\n\n  return getFieldDecorator(name, formFieldOptions)(\n    <TransferTreeControlled dataSource={dataSource} {...props} />\n  );\n};\n"]},"metadata":{},"sourceType":"module"}