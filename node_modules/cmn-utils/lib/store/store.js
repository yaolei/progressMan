'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _store = require('store2');

var _store2 = _interopRequireDefault(_store);

var _utils = require('../utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var Store = function Store(namespace) {
  (0, _classCallCheck3['default'])(this, Store);

  _initialiseProps.call(this);

  this.store = namespace ? _store2['default'].namespace(namespace) : _store2['default'];
  this.session = this.store.session;
  this.local = this.store.local;
}

/**
 * 反回一个新的store
 */


/**
 * 将 value 存储在本地缓存中指定的 key 中，会覆盖掉原来该 key 对应的内容
 * Examples:
 *
 *   .setStore('name', 'abc')
 *   .setStore({ name: 'abc', age: 18 }) // 一次存多个
 * @param {string | object} key 
 * @param {any} value 
 */


/**
 * 从本地缓存中异步获取指定 key 对应的内容, 如指定alt当没找到时反回alt
 * @param {string} key 
 * @return {Promise}
 */

/**
 * 从本地缓存中同步获取指定 key 对应的内容, 如指定alt当没找到时反回alt
 * @param {string} key 
 * @param {any} alt
 */


/**
 * 获取当前Store的所有key-value信息,放入一个对象中
 */


/**
 * 获取当前Store的所有key-value信息,放入一个回调函数里,这样可以接着链式操作
 * .getStoreInfoAsync(v => v).setStore({})
 */


/**
 * 从本地缓存中移除指定 key 
 * @param {string} key 
 */


/**
 * 清理本地数据缓存
 */


/**
 * 直接使用 store2
 */
;

var _initialiseProps = function _initialiseProps() {
  var _this = this;

  this.create = function (namespace) {
    return new Store(namespace);
  };

  this.setStore = function (key, value) {
    if ((0, _utils.isObject)(key)) {
      _this.store.setAll(key);
    } else {
      _this.store.set(key, value);
    }
    return _this;
  };

  this.getStoreAsync = function (key, alt) {
    return Promise.resolve(_this.store.get(key, alt));
  };

  this.getStore = function (key, alt) {
    return _this.store.get(key, alt);
  };

  this.getStoreInfo = function () {
    return _this.store.getAll();
  };

  this.getStoreInfoAsync = function (cb) {
    if ((0, _utils.isFunction)(cb)) cb(_this.store.getAll());
    return _this;
  };

  this.removeStore = function (key) {
    _this.store.remove(key);
    return _this;
  };

  this.clearStore = function () {
    _this.store.clearAll();
    return _this;
  };

  this.native = function () {
    return _store2['default'];
  };
};

exports['default'] = Store;
module.exports = exports['default'];